Speaker A: Welcome to bankless, where we explore the frontier of Internet money and Internet finance. And today on the show, we are exploring the frontier of the unification of Ethereum. This is a continuation of our uniting Ethereum series that we've been doing with Justin Drake. Today we have, in addition to Justin, Brendan Farmer from Polygon. Exploring the Polygon AG layer. As you know, if you've been inside the Ethereum ecosystem using layer twos is a fragmented experience. Hopping from one layer two to another is costly and takes time. Justin Drake does not think that this is the future of Ethereum, and this is not the future of Ethereum that many of us have signed up for. We just need a little bit of more technology, more innovation to refragment, recompose, unify all of Ethereum layer twos to be one unified superstructure that we can just call Ethereum.
Speaker B: Yeah. So, David, as you mentioned, this is our third episode in a series, all of which included Justin Drake. The first episode we talked about fixing fragmentation across Ethereum, and we had a zoomed out look at the landscape of Ethereum and what some of the solutions might be. Then in the second episode, we went deep on shared sequencing and we talked to Ben Fish from Espresso. Now this episode is with Brendan Farmer. We're talking about AG layer, which is another solution. I think there's really like three technologies, I would say, or three things to know in terms of the roadmap for fixing fragmentation and unifying all of Ethereum's various layer two chains. The first is shared sequencers. The second, I would say, is based roll up. So using Ethereum mainnet itself as a shared sequencer. And the third is the technology we're going to talk about today, ag layers, specifically for ZK vms. And Brendan has really pioneered the frontier here. And with these three solutions, I feel pretty confident that Ethereum is going to fix its fragmentation issues so long as we can socially coordinate. David, this is going to require the entire community to come together, stack hands and agree that, that these solutions are a way to fix the problem and then adopt them. It's not a technical problem at this point so much as it is a social coordination issue.
Speaker A: Banquet Nation we are exploring the frontier of Ethereum's recomposability, recomposing all of Ethereum's different layer twos into one seamless experience. Today on the show, we are continuing this series that we've been doing with Justin Drake. Justin stepping in as a technical co host today, not just a guest being interviewed as we talk to Brendan Farmer, co founder of Polygon. Justin, welcome back to the show. Brendan, welcome for your first time.
Speaker C: Thank you. Really excited to be here.
Speaker A: Justin. We've been doing this series, and maybe as you are now elevating yourself to technical co hosts rather than somebody that we are interviewing, maybe you could talk a little bit about. Just prep the listener for the conversation that they're about to hear today. What are some themes? What should they be preparing for? How should they think about going into this episode? And also, just what are your goals for this conversation that we're about to have?
Speaker D: Right, so we have this problem with ethereum, which is the fragmentation of the l two s and the roll ups. Each l two is its own individual silo, and to a very large extent, that's due to the fact that each l two has its own sequencer. Now, we can use ideas like chai sequencing to try and reunite Ethereum, but we need more than that. One of the things that we need, for example, is Zkhdem as a low latency tool for settlement. But it turns out that that's also not enough. We need a little bit more. And basically what Brendan is bringing to the table today is basically ideas around safety of cross roll up transactions and gas efficiency. So if you have some sort of super intent or super transaction, meaning a complex transaction that touches multiple rollups, you kind of have to trust the sequencer to add them on chain as a bundle, meaning to say all of them or none of them. And what ag layer is all about, and this aggregation thesis is all about is basically not having to trust the sequencer for this bundling and for this atomicity. The other thing that Brendan is bringing to the table is very significant gas efficiencies that come from two places. Place number one is this idea of having a shared deposit contract. So right now, every single roll up has its individual deposit contract, which is this native bridge between the l one and the l two. And that means that every time you want to send assets from one roll up to another, you have to withdraw to the l one and then deposit again. And so the fact that you have to touch the l one, even just a little bit, is kind of expensive. And then there's this final component of Brendan's vision, which is to safeguas on the proof verification. So if you have multiple roll ups that share the exact same proof system, well, then you might as well aggregate the proofs and therefore only have to verify one on chain, which is a further gas optimization. And when you combine shared sequencing with low latency proving and low latency settlement, plus all the benefits of ag layer, which includes gas efficiency and the safety of the bundle layer. Then you get something which is really compelling and brings us, in my opinion, to the vision that we all want, which is this united chain of Ethereum.
Speaker A: Justin, I'm a pretty visual person, and so I'd like to actually kind of try and ask you about how this ag layer proposal, this proposal for this ag layer fits into the topology of Ethereum. I often view Ethereum as kind of like this sphere, this globe, this planet. And then we have vertical layer twos coming out of it, right? You have the vertical chains, scaling, ethereum, optimism, polygon, arbitrum, zksync, in that kind of version of the world where you have the layer twos spawning out of Ethereum, in the topology, place the ag layer for us. How does it relate to the topology of Ethereum?
Speaker D: Right. I guess I would think of it as one of the horizontal layers of the stack. So we have settlement data availability, sequencing, and now there's this really thin, actually, aggregation layer, which is adding to this cake. And the reason I mentioned the word cake is because there's this meme going around called chain abstraction, and the c and the a stand for chain and abstraction.
Speaker A: So with this aggregation layer, is this like an intersection point for layer two s to meet before touching the ethereum layer one, the way that I think.
Speaker D: About it, is as a small modification to the settlement layer. So right now, the way that settlement works is that each individual roll up has a different l one contract to do the settlement. But if we do a little tweak to the settlement contract, we can do several things. Like, one is that we can make sure that the settlement is aware of these super intents or super transactions, so that it will only settle if these intents are satisfied, if the bundles are respected. Another aspect is having a single l one contract for deposits, so that you don't have to go through the l one every time you want to move assets from chain one to chain two. And then finally, there's again this small tweak to how settlement is made, which is that instead of having one proof per roll up per slot, you have an aggregated proof per roll up per slot or whatever it is.
Speaker A: Brendan, let's go ahead and get into your brain a little bit. Can you kind of walk us through the maze, the decision tree that you and the Polygon team came up with to produce the ag layer, how did the ag layer become inspired?
Speaker C: Yeah, sure. So I think if we go back to a year ago, there was this question that kept being asked about polygon that was to me a very annoying question. And it was like, doesn't the polygon Pos chain and the polygon ZKVM, aren't they competitive with each other? And for us it was like, no, of course not. We don't envision a world in which a single chain can meet the world's demand for block space and can sort of accommodate all of the Ethereum activity that's moving to l two s. But I think it was like a very reasonable question because it got at this fact that like, liquidity and users and sort of state was being fragmented between these two chains. And so they were in a sense competitive, and they didn't share network effects, at least in a meaningful sense. And so I think we really started to think, okay, and there are a lot of angles to this, I think, but we started to sit down and think, like, if Ethereum is really going to scale, what do we mean by scaling and scalability? It's really scaling access to liquidity into shared state. This vision of having this constellation of fragmented roll ups that live above Ethereum probably actually won't get us to where we want to be in terms of scaling and building infrastructure that can truly power an Internet scale ethereum ecosystem. We started to think about, what are the current limitations with rollups today. One, obviously is anytime you want to use the native bridge to get from one roll up to another, you have to touch Ethereum. Given that Ethereum's block finality time is twelve to 19 minutes, this actually ends up being a lot of latency for users to experience. And so the question was, how do we provide a unified environment that feels like a single chain, even as we can accommodate many, many different chains with many different vms and many different tokens and many different governance setups and mechanisms, how do we maintain unified access to liquidity and state in the l two ecosystem? That's where like from a sort of overarching design principle, we ended up, guys.
Speaker B: Can I ask a bunch of just dumb questions before we get like, continue this and go deeper? So one maybe dumb question, Brendan, is, is this just for polygon chains versus for all roll ups?
Speaker C: No. So this is not like we've tried to be very intentional in like, not calling it like the polygon ag layer and like branding it as like a polygon zag layer. Because, like, we see this as, first of all, like neutral and public infrastructure for Ethereum. And we can get into, like, Jess and I had a really good conversation yesterday about kind of like, the business decisions, like that sort of drove this and why it makes a lot of sense. But we see this as like, if the ethereum ecosystem is to grow, and if we're going to grow the pie for all l two s. Like, we need infrastructure like this, and like shared sequencing and, and sort of on the front end, like chain abstraction wallets. But fundamentally, this is not something that's just for the polygon ecosystem or restricted to polygon chains.
Speaker B: Okay, so this is like, you're trying to make this an Ethereum ag layer. And that requires, of course, we've got Justin here, who's a protocol researcher, very familiar with principles of credible neutrality that requires maximum neutrality here. Justin, I'm wondering if you could comment on this from your perspective. Is this a solution for all roll ups in Ethereum? Or I like just polygon, or do you want to cosign on what Brendan said, or do you have any differences here?
Speaker D: Right. So I think there's definitely an intent to build a public good, one which is well beyond the boundaries of polygon, one which is maximally inclusive. And as Brendan said, there is no opinionation on the specifics of the virtual machine, of the specifics of the governance of the token, of the branding and all of these things. And so in some sense, it's trying to be this really minimal piece of infrastructure that unlocks what we want, which is the safety and gas efficiency. Now, if I were to push back a little bit on Brendan, as it is today, my understanding is that the ag layer has some training wheels which are not fully trustless and credibly neutral because they're operated by polygon. And there's also a layer of governance which is there in the short term to plug some holes. But my understanding is that the vision, the endgame, is that this can be a fully immutable piece of infrastructure, fully mutable, smart contracts, for example, that the whole ecosystem can use. And I would say one thing, which is that polygon is not the only team that has been researching this Zk sync, for example. And the Metalabs team has been thinking around shared deposits, and they also want to build infrastructure that goes beyond the Zk sync ecosystem. I think there is a realization here that the metagame that we should be playing as a community really should not be around creating these mini empires. Mini empires actually is a term that Vitalik uses internally. And really we should be thinking in terms of these maximally credibly neutral pieces of infrastructure that are going to maximize network effects for Ethereum.
Speaker B: Okay, a couple other things. I understand this is just for ZK evms, or can optimistic roll ups also participate in Ag layer?
Speaker C: So, in our mind, it's really important for the latency of the native bridge to be very short. And so in that sense, the long delay window that is required for a challenge period for fraud proofs is not compatible with this model. And so it would only be for chains that have a ZK prover and can come to finality in a very short period of time.
Speaker D: I guess what I would say is that, in theory, the AG layer could support optimistic roll ups. And qualitatively speaking, it's a very similar system. You have a proof mechanism which takes some amount of time to materialize on chain for settlement. Unfortunately, there is a quantitative difference, which is so large, we're talking orders of magnitude, that it actually becomes a qualitative difference. So instead of a few minutes for settlement time, it's a few days. And the reason this comes in is that there is this safety and liveness trade off. And so if your settlement time is so long, then now you open up attack vectors where, for example, a malicious sequencer could do these really long term reorgs, as opposed to limiting the scope of bad things that the sequences can do.
Speaker B: Okay, another dumb question there. So is something that you opened up, Justin, that gives me some optimism, but also some pessimism, is that other ZK chains are exploring a similar kind of ag layer type of solution. Right. So the optimism there is, oh, we're coming to consensus on a technical solution that will help solve universal synchronous composability across all of our ZK evms. And then the pessimistic side says, oh, my God, every single chain ecosystem is creating their own version of this standard, and we're just going to end up with a whole bunch of standards that no one can agree on.
Speaker A: So now we're fragmented again.
Speaker B: Yeah, now we're fragmented again. So how do we get outside of that coordination failure mode? I guess a few questions I have is, like, what does it take for a ZK chain to sort of participate in Ag layer, and what are kind of like, the incentives towards converging on a single solution like this ag layer, versus kind of developing their own? What would make them want to do that? What would make them want to maybe resist that?
Speaker C: So I can give an answer for that. I don't know too much about the Zksync proposal, but I can say from the polygon perspective, we sort of anticipated that this might be the case. And so one thing that really drove our, our approach to designing it was to make it as minimal as possible. And so in this design, there's no requirement that chains use a particular sequencer that they use like even the shared sequencer, or that they use like a particular staking token or gas token, or like, like truly, first of all, like there's no rent extraction by polygon. Like there's no like aspect in which polygon is like capturing value from this ecosystem and there are no restrictions that are imposed by polygon. We thought that this was a really, really important thing to do to make it maximally inclusive, because if you look at what other l, two ecosystems that are exploring similar constellation of chain ideas are doing, there are revenue sharing requirements and there are the requirements to submit to a single governance mechanism. Our approach, like Justin said, is to make something that's very, very, very minimal and does not impose requirements on chains that join it and that use it and further to work in conjunction with teams that are building the coordination mechanisms that are required for this to work. So shared sequencing teams like Espresso and others that are building based shared sequencing and, and other modes where chains can actually coordinate. And so I do think that I'm optimistic that this will make sense for a lot of chains, a lot of teams, precisely because of the lack of requirements that are imposed to participate.
Speaker A: Are other people's ag layers, their ag layers, do they have higher requirement, like higher or less levels of credible neutrality, higher domain specific requirements? Is Ag layer the theoretical minimum level of compromises about it being some sort of proprietary ecosystem?
Speaker C: Yeah, so I can't speak with any authority, unlike what other people are doing, but I do think that what we're building does represent the theoretical minimum for requirements. So you can use any VM safely in this ecosystem, you have complete control over your execution environment and like your governance process, your token. And there's no value capture mechanism that's imposed by Polygon. And so I think from that perspective, it makes sense to claim that it's the minimal version of what could be.
Speaker A: Considered an angular, it's the most minimal version that's still not formally enshrined in Ethereum, though. And so that gap is the difference between something that's purely credibly neutral and what the AG layer currently is, correct?
Speaker C: Yeah, I think so, although I do think that there are ways, and certainly we're thinking about ways to progress along that roadmap. So you could imagine the AG layer being powered by Ethereum, restaking or partially powered by Ethereum restaking or eventually it being enshrined into the protocol. But I do think that from my perspective, Ethereum needs something like this pretty badly actually, and for a lot of reasons. I think getting to market and providing this solution in conjunction with shared sequencing is something that should happen in the short term. From our perspective, the code is open source and we can move toward figuring out the ideal relationship with the Ethereum protocol. But I think speed of development is paramount right now.
Speaker D: I mean, one of the things that I think is important is that really this should be branded the Ethereum aggregation layer, not the polygon aggregation layer. I think it might also be good to have the repos be in a neutral territory, as it were. And I think it will also be good to incorporate ideas from the metalabs people, because I'm sure there could be improvements to the aggregation layer that could be had. The other important thing is that there needs to be some standards that are set so people need to start writing ercs that can be adopted. And all of this is a lengthy and time consuming and energy consuming coordination process. But I think it's one that we're ready to invest in because the returns can be very large as one piece of infrastructure that's already live now is we have a sequencing and preconfirmation group and weekly call without 130 builders, including all the roll up teams and a lot of the infrastructure providers. Week by week we're making progress, converging in terms of where we want to be as an ecosystem.
Speaker B: Justin, so are you optimistic that we can find some social convergence here on what the right sort of ag layer is, at least in the ZK community? It sounds like you are maybe cautiously optimistic, although I haven't heard anyone saying definitively, yeah, Matterlabs and Zksync has signed on to this and they're very excited to help support Ethereum's AG layer. I'm mostly hearing this from polygon so far. Are you optimistic and what would need to happen?
Speaker D: Yeah, I mean, I think one possible way forward is that each ecosystem experiments with these ideas. So you might have shared sequencing, for example, within an ecosystem, you might have some sort of aggregation layer within an ecosystem, and I think people will start converging towards best practices, and then as a next step we can all come together and pick the best ideas, write everything in the most credibly neutral way with ercs, and then basically migrate to a common shared sequencer and migrate to a common aggregation layer.
Speaker C: I think that makes sense, and certainly from the polygon side. I think there's a lot of willingness to operate along that roadmap. If you look at what we've done with planky three, which is our next generation proving system, I think it represents the most performant ZK tech right now. And we have been very deliberate in moving it out of the polygon GitHub.org and really positioning it as a public good that anyone can use. I think that I could certainly see a similar process for the AG layer and for our efforts there as well.
Speaker B: Okay, so here's my last dumb question for you, and then we can go deeper.
Speaker C: None of these have been dumb questions.
Speaker B: All right, well, I'm feeling on this subject. Okay, so I'll let David, do you like be the smart podcaster here. Okay, so obviously, Justin, we had you on for our first fixing fragmentation episode, and you brought up this term, universal synchronous composability. I think at the time you weren't fully aware of what egg layer was and what it was about. And so this has been a relatively recent discovery, which is kind of exciting. And I wasn't present, but I also listened to the, a united chains of ethereum episode with, with Ben from Espresso. We learned all about shared sequencing, which is a key solution to the problem that the problem set that you mentioned in the, in the first episode. So we've got those two episodes back to back now. This is our third in the series on AG layer, and maybe we'll be, it will be kind of our last stop. You just paint the picture of where this fits. So I'm fully on board with universal synchronous composability. We get atomic transactions and the ability to move liquidity and have these super blocks and super transactions across all of the chains. It really unites things. And the solution you outlined is based roll ups, shared sequencing. Fully, fully on board with that. Listen to the shared sequencing episode. Really cool. Where does Ag layer fit in to this whole picture? And how does it help us achieve this universal synchronous composability?
Speaker D: Right. So with shared sequencing and real time proving, you have the ability to do synchronous composability. But there is a catch. And the catch is that you're giving the ability for the shared sequencer to do synchronous composability. But what if they choose to do something different? Now, the solution that I had in mind for the very first episode was that the shared sequencer is collateralized. They could have large amounts of collateral. And so if they start misbehaving, we simply slash them. And in some sense, what aggregation layer is all about moving from crypto economic security with collateral to cryptographic security, so that whatever bundles are being promised by the shared sequencer cannot be unbundled. So you have this, I could call it super transaction or super intent, which cannot be rugged. So let's take an example. Let's imagine you want to do an arbitrage across two chains, and you want these two transactions on chain a and chain b to go at the same time, and so that you're delta neutral on your arbitrage. But what if the shared sequencer just says, okay, I'm just going to pick transaction a, I'm happy to be slashed, but because your transaction is so economically valuable, it's actually to my advantage to get slashed and rug you as the user with the aggregation layer. We're in a position where the only bad thing that can happen is a liveness failure, meaning that your super transaction just doesn't go on chain, but it cannot get unbundled. That's aspect number one. It's an increase in safety and robustness of this united chains of Ethereum vision. The other aspect is an efficiency, one where we're basically improving quite significantly the gas efficiency of synchronous composability. What is synchronous composability? It's this idea that within a single block you can have assets move arbitrarily many times between arbitrarily many chains that share this shared sequencer. But the problem is that every time you do so right now, you have to go through the l one. And the reason is that the l one contract is this so called canonical bridge, or native bridge, where all the assets lie. And so if you want to physically migrate and clear and settle assets away from one chain, you have to go through the l one for the withdrawal and then through the l one again for the deposit. Now, if we have a shared deposit contract or some sort of unified bridge, then now you can clear and settle the migration of assets from chain a to chain b without going through the l one. It magically happens without having to read and write states on l one.
Speaker B: Okay, so is this better than kind of shared sequencing? Does this work alongside of it? Is it sort of a competing standard?
Speaker D: It's completely complementary. It's like a match made in heaven in some sense.
Speaker B: And it only right now will work for ZK, the ZK EVM world, and we won't be the optimistic rollups, won't be able to use AG layer. At this point in the future, they'll have to use the kind of espresso shared sequencing from episode two. Is that correct? We're not getting universal across AG layer, because we can't integrate with our optimistic roll ups. Is that correct?
Speaker D: I think all chains can share a shared sequencer if they so choose to, including the optimistic roll ups. And I also think that there is a pathway for the optimistic rollups to also join the aggregation layer. But ultimately, at the end of the day, it's going to be user choices, and maybe choices out of the chains of how much liveness risk do they want to take on? Because there's this possibility that basically the sequences start misbehaving, and that leads to reorgs of the chains. And so, if we have these very small reorgs, it's probably fine, but if we have long reorgs, then it's maybe not so fine. And maybe, Brendan, that's a question for you. Is this something that can be done on a supertransaction by supertransaction basis, or does it have to be done at the chain level?
Speaker C: So, I think that it would. So, the way that I see it is that chains need to basically navigate the trade offs between safety and liveness. And so, some might only accept sort of synchronous bundles or asynchronous messages if they're able to verify, or like, if a proof has been generated, or if they're able to verify, like, the state of another chain. Others might rely on a shared sequencer and builders. And so I think the problem with an optimistic roll up is, like, you have this seven day or multi day withdrawal period, and if something bad happens within that period, or if that chain interoperates with another chain where something bad happens, then you have this possibility of a reorg. And I do think beyond there's a very small delta where reorgs don't present that much of an economic cost. And I think that's good in two ways. First, because there's a maximum in terms of the economic value that can be extracted from users by causing a reorg. But I think it also really reduces the probability that a sequencer or the operator of a chain would misbehave, because they have so little to gain from causing that liveness failure. But I think if you have a multi day period where things can go wrong, then the dependency graph, where you have these cascading issues and liveness issues and reorgs, that suddenly starts to become, I think, really bad. And so, yeah, I mean, from my perspective, I think that there will be a world in which, like, optimistic roll ups migrate to user knowledge proof so that they can participate with more chains in a shared sequence or ag layer environment. But maybe that's another conversation.
Speaker B: Okay, here's my dumb summary of things so far. Right. In order to get universal synchronous composability across all of the ethereum chains, we have a few solutions. We have shared sequencers, which can give us this composability across all chains, as long as the chains adopt shared sequencers. And then for ZK evms, we also have AG layer that are better than shared sequencers because they're not just based on economic security. We have cryptographic security instead. This is complementary to shared sequencers. And through these shared sequencer solutions and AG layer, we could basically unite all of the chains. Is that too simple of an explanation, or is that really the highest level where we are right now?
Speaker C: Yeah, I think it's right. I think the way that we talk about it is there's a coordination layer. And one component of that, maybe the foundation, which is very, very thin, as Justin said earlier, is the AG layer, and it's providing cryptographic safety and the strong guarantee that chains can rely on shared deposits and a safety mechanism to protect against issues and interoperability. Then above that are what we call emergent coordination mechanisms. Those are shared sequencers and relays and builders. I do think it's really important to emphasize that the AG layer doesn't work without those coordination mechanisms. The Ag layer is only providing safety. It's not actually helping chains coordinate. And so it's very, very much like a complementary solution to shared sequencers.
Speaker A: Okay, so the way I see a lot of these layers, like shared sequencing, closer to the top of this infra layer, ag layer below that, and below the ag layer, ethereum, all of these are doing their own processing, their own efficiency optimization, compression of transactions. Everything is going through this processing supply chain, where it finally gets settled into an ethereum transaction, and the root of trust gets anchored in the ag layer that is being proposed as the first level above ethereum. Then you have Brendan, the emergent coordination infra on top of that to do the full chain abstraction, the full recomposability. From a UX perspective, is that a way to articulate this kind of structure?
Speaker C: Yeah, I wouldn't necessarily impose a hierarchy of levels, but I think the AG layer is a very thin layer, and then there are shared sequencers, and there's the settlement layer that has a shared deposit contract? I don't know, Justin. Is that how you see it?
Speaker D: Yeah. I mean, one way to think about it is as essentially being the settlement layer with a small change to the small contracts that we already have. I mean, another way to think about it is to start with the sequencing and then adding safety to that. So you can kind of think of it as either being on top or below. But maybe the best way to think about it is there's no real hierarchy. We have these modules that all need to be there, and they coexist in a more fluid way than a strict hierarchy.
Speaker A: So from my understanding, all ZK chain development kits have some notion of an ag layer. And I think really the two players here are polygon and Zksync. But you could imagine scroll and Tycho in their future iterations. They would also have some sort of fractal scaling structure. Fractal scaling. And ZK has almost been synonymous to me. And Zksync has their own internal notion of some sort of ag layer, to my understanding, and that's their proprietary ecosystem. And then there's also one project out there that's called Nibra, who I think is just starting as proof aggregation without really necessarily building the chain development kits. And so there's this notion of an Ag layer. And really what we're doing is we're trying to build the most credibly neutral one to make this the most scalable, the most accessible. Brendan, you want to make a comment?
Speaker C: Well, so I think this brings up a really good point, and this is maybe a failure in how we talk about the AG layer, but I think a lot of people have sort of read who are building in the ZK community, read what we put out, and they're like, oh, we also do proof aggregation. So we are doing the same thing. And you know, if you get these properties through proof aggregation, then we also get those properties through proof aggregation, like fast interoperability and all this stuff. That's actually not true. I think it's really important to emphasize that when we talk about the aggregation layer, we're really talking about aggregating chains. I do think our proposal is unique in that it's providing the two guarantees that Justin described, which are the a safety guarantee for really fast interoperability at lower latency than ethereum finality. The second guarantee is being able to safely use a shared deposit contract. Even if you have an ecosystem where you have heterogeneous vms. This is actually really, really important and subtle because let's say that we have an ecosystem and we start out all using the same prover. So we have a few different chains, and they're all using a ZKBM prover, and that prover is audited, and we're pretty sure that there are no soundness bugs. And so we can pretty much safely exist in this ecosystem. But let's say that someone comes up with a really cool idea for a new execution environment, and maybe it's like it offers new precompiles, or there's a new transaction type, or there's something that adds value to this ecosystem. And so we say okay, great, we'll audit that and we'll allow it to be in this ecosystem. But what about the nth new execution environment? Suddenly out of all of these n execution environments, actually the probability that somewhere in there, there's a soundness issue, or there's some way for an attacker to create transactions that are invalid, but where we can still generate a proof, actually becomes a really really meaningfully high probability. And that's really really bad, because if we have a shared deposit contract, then any chain that can create an invalid transaction thats verified by a proof could drain the entire bridge. You could say Im withdrawing a million ETH from chain number 2000 and Im just going to drain all of the funds in the deposit contract. One thing that the Ag layer provides, which is really really important, is it allows us to permissionlessly use any execution environment, but we can do so safely because we have this guarantee that even if a chain is unsound, if its prover is unsound, then that prover can only withdraw the funds that are currently deposited in that chain. This can still be a bad outcome for users. Its a risk that currently exists with all ZK rollups, where if the prover is unsound, then a zacker can steal funds, but the entire ecosystem is not at risk. So each chain is quarantined to soundness failures. And so I think that's a really, really important guarantee that, to my knowledge, is only provided by the aglaya.
Speaker A: Okay, just to make sure I understand what's going on, because this is getting at one of the points that I want to get to, which is talking about that one central bridge contract. But I think what you are saying is that the AG layers being maybe like application specific, where the applications are chains, it's supposed to be infra. For chains, it's not just generalized proof aggregation, it's specifically customized for proof aggregation between blockchains and all the other proofs of the world can go somewhere else. That's kind of what you're saying.
Speaker C: Yeah, exactly. And it's generating very, very specific proofs that allow for chain aggregation. So they give these safety guarantees.
Speaker A: And so this chain specific infra allows the sovereignty of these many, many chains to be preserved while the soundness and security of the aggregation is also preserved.
Speaker C: Exactly.
Speaker D: From a technical standpoint, I think the way it works is that you have this idea of chain level accounting. So you have this central smart contract which keeps track of every single deposit from every single roll up. So, for example, rollup A has deposited 100 ETh. If they have a bug, which allows an attacker to request 1000 ETH to be withdrawn, well, beep. This withdrawal will not be authorized. Only 100 ETH will be authorized because that's how much has been deposited. And so now you have this layer one contract which doesn't need governance in the sense that anyone can permissionlessly join in, define the rules of their verifiers, saying, this is my verification circuit, this is my proof system. And if there is a bug in my verification circuit or my proof system, I am the only one that's exposed. Everyone else is not.
Speaker C: Exactly.
Speaker A: So there's something I want to get at with this, just at a very non technical, intuitive vibe level, which is if you tell me that Ethereum is going to have this one single deposit contract as the portal to get to the layer two level of ethereum, there's one single deposit contract. All of a sudden, I totally understand intuitively, like, oh, that is going to be a very simple fix of fragmentation. If there's one single deposit contract, like, all the fragmentation is gone. But then I'm also feeling like that is very fragile and brittle, because now we are centralizing risk into this one single contract. Like, if the arbitrum contract goes down, optimism is doing just fine, and vice versa, right? Like, ethereum is all about anti fragility. Uh, there shouldn't be any dependence on, and we shouldn't enshrine any one single portal into the layer twos. That is putting too much concentration into that one portal as a vibe that this is how this makes me feel. And I understand that, like, we can do some chain level, uh, accounting tricks to start to help, uh, help with that concern. But I'm still, as a vibe, the kind of concerned about the fragility of a single, uh, deposit contract for the entire layer two ecosystem. Who wants to quell me of this.
Speaker D: Fear so we don't have to get to this endgame immediately? I think there's these intermediate steps where there's partial aggregation within ecosystems, and there's a lot of experimentation happening. I think another thing worth mentioning is that this small contract can be extremely simple, orders of magnitude simpler than a ZKVM, for example. And so really what it's doing is keeping track of these deposits and withdrawals. And so in some sense it's just simple additions and subtractions. Another thing worth mentioning is that if we are going to use one or some sort of winner take most contract, then we better do a lot of due diligence. And one of the tools that we have at our disposal is called formal verification, where you're basically using mathematics to prove that the contract is correct. On that note, within DFM foundation, we're very excited about formal verification because we see circuit bugs as being one of the main systemic risks for the roll up centric vision, because we have these very complicated circuits with ZK vms that potentially hold tens of billions or hundreds of billions of dollars. And that could be way worse than the DAO hack. For example, one of the initiatives that we're considering internally is actually to have some sort of a competition or prize with tens of millions of dollars at stake for formal verifiers to come together and prove the equivalence of the ZKVM circuits relative to, for example, the Python spec, or relative to the geth implementation. So in the world of Ethereum, we have about a dozen implementations of the EVM. We have the Python spec, and then we have all the execution clients, and then we have all the ZK circuit implementations. And ideally, we'd be in a world where all of those are formally proven to be equivalent. It will take time, but I think these much simpler small contracts for aggregation could potentially be formally verified much sooner. Now, this is a little bit of alpha leak, but one of the things that we want to do to speed up the formal verification is to try and leverage AI in some way or another, because what is AI great at? It's great at doing these very tedious and boring tasks, but it's also a machine, so we can reason and do mathematics. And in some sense, formal verification is the intersection of tedious and mathematics. What would be great is to have AI infrastructure that would generate these formal proofs. And so if you are someone who's at the intersection of crypto and AI, and ideally formal verification, please get in touch with me.
Speaker A: Yeah, all three of you?
Speaker C: Yeah, I think it's a really valid concern to have, but I would follow Justin. I would say we're not proposing a world in which tomorrow we wake up, and we have $35 billion locked in a single deposit contract without formal verification or audits. But certainly from our perspective, we are very proactively taking steps to prioritize maintainability and auditability of these programs. We're going to be working very closely with Succinct, which is a really cool project that built a general purpose ZKVM where you can take rust code and compile it to run in this ZKVM. From our perspective, this really, really helps with the overall maintainability and auditability of the system. Still need to do formal verification of the ZKVM and programs and take all those steps before we have something that we can be 100% sure is bulletproof. But certainly the way that we are approaching this is to prioritize auditability and safety.
Speaker A: Okay, so what I'm hearing is that, yes, there is a movement towards fragility in the single central contract that the AG layer proposes, and we think we can contain that fragility with formal verification and auditability. Not too long ago, Vitalik put out this tweet about how he's had some sort of change in priority in his brain space about the increased complexity at the layer one, and how that can reduce complexity and reduce bug risk at the layer two. And if I'm hearing some sort of proposal about some single global infra for all of Ethereum to leverage this pseudo enshrined piece of ZK infrastructure to help make life very simple at above layers, this seems to be falling in line with that directional philosophy that Vitalik was tweeting about a week ago or so. Am I onto something here?
Speaker D: Yeah, I think that's a fair point. I think what Vitalik specifically had in mind is this idea of having a ZKE EVM opcode within the EVM that the roll ups can just leverage so that they don't have to re implement the EVM with their own circuits. And instead you can leverage the client diversity of the execution layer as well as leverage the social layer. If there's something catastrophic that happens, basically we can all upgrade our nodes and in some sense change the rules of the game to fix any bugs that appear. And then the other advantage of this approach is that you no longer need governance to keep EVM equivalents. So every time you change the rules of the EVM itself with a hard fork, well, the opcode within the EVM will automatically update as well. I think that this is an interesting idea, David. I hadn't thought about it, but yeah, maybe there is an opportunity to provide similar infrastructure for an aggregation contract.
Speaker B: I want to ask how this starts uniting the chains. We live in this world right now where we have a bunch of fragmented chains. And so this is like all of the states in the US being sort of fragmented, their own kind of jurisdictions. So we got Florida over here, California, Colorado, they're all kind of fragmented. We don't have universal synchronous composability between these states. And so how does, from the ag layer lens, how does ag layer, kind of like a slime mold, start to, like, creep over all of these chains and start to unite them? Because I'm guessing from our conversation so far, just like, just generally how this works. Not going to happen overnight. So, uh, Brennan comes out. We have ag layer to ethereum, ag layer, boom. The chains are all united. We fixed it, we solved it. No, that's not how it happens. So what has to happen is chains gradually start to use ag layer to unite. So can we talk about the roadmap for this? So, Brendan, since this came from Polygon, there was not a Polygon project. This is a general Ethereum project. But I imagine you'd have some quick opt in from the polygon chains. So right now, we have the polygon proof of stake chain, and we have all of the Polygon ZK chains. How does the polygon ecosystem start to unite? And then from there, it would seem like we would go to other ZK type chains, and then from there, we go somewhere wider, like all of Ethereum. Talk to us about how this kind of plays out and how we start uniting the chains, what the various milestones are.
Speaker C: Yeah, so that's a good question. Right now, we're just at the beginning. There are two chains that are currently on this sort of shared bridge, and using the shared infrastructure of what will become the ag layer. Those two chains are the Polygon ZKVM, which is a ZK rollup, and then a star, which is not run by polygon at all. It's an independent project that's using the Polygon CDK to participate in the ag layer. Like you said, the path is for the Polygon Pos chain to upgrade to ZK and then join the AG layer. That will be, I think, a big step for the ecosystem, because I think there's something like 2 billion bridge to the Polygon Pos chain, and that will be absorbed into the aglayer. But then there's a very, very quick ramp up in terms of chains that are planning on joining the aglayar. OKX is launching a chain that will be on the aglayer. Manta Kanto Nier there are a lot of l one S and l two s that are planning on becoming part of this ecosystem. And I would say the vast majority of those are not operated by or sort of affiliated with polygon in any way.
Speaker B: Oh, so they're not. So they're not all like chain development kits? CDK polygon, CDK chains. These are outside of that ecosystem as well.
Speaker C: Yeah, so I would say that we use CDK sort of very loosely. So right now the CDK is a client improver stack. That's basically just a reimplementation of the ZKVM client improver stack. But in the future there's going to be an incredible amount of flexibility in terms of what chains will be able to join the AG layer. I would think about it more as the minimal interface that's required to participate in the bridge and to submit proofs to the AG layer, rather than being a full stack in the sense that the op stack or Zksync stack is a fully defined and specific client and proverb implementation. My dream for the AG layer is to be able to have a heterogeneous environment of many, many different chains that use many different tokens, but more importantly use many different execution environments. So you can imagine a chain that has an execution environment that's specifically written in rust for it to be a highly tuned implementation of a game that runs on chain. Using SP one, you could get the prover for free. You would take your program that you've written in rust for your highly efficient app chain, you would compile it to sp one, you would immediately get a prover and you could immediately plug it into the AG layer. I think it exposes this vision of the world that's actually very, very different from how l two s currently operate. If you think about what it takes to launch an l two that's successful, you obviously have to be creating some sort of positive economic value. You must have an execution environment that's more efficient or offer some new functionality, or a defi primitive, or a game, or an NFT collection. You have to build that and you have to do this thing that you're good at, but you also have to do a bunch of stuff that maybe you're not good at in order for your chain to succeed. So for your NFT collection, you have to bootstrap a marketplace and do liquidity mining and airdrops and try to build the economic infrastructure and the liquidity that's necessary for your application to succeed. I see this vision of l two s where actually you don't have to do that. Builders will focus on their specific comparative advantage, whether that's a new Defi primitive or a game or an NFT collection. But then they'll be able to plug into liquidity and marketplaces and shared state and applications that already exist in the ecosystem. And they won't have to repeat this very inefficient and wasteful process where we're launching new l two s and new tokens, and we're bootstrapping liquidity, and we're playing all these games that are maybe not necessary and maybe even counterproductive to actually seeing real adoption and usage in crypto. That's how I see things playing.
Speaker B: So, Brandon, let me repeat some of that back to you right now. As of now, is Aglaya on Mainnet and it's supporting two chains. Is it live?
Speaker C: Maybe. So when we say the AG layer, there are many different phases, and the first phase is a unified bridge that has a unified deposit contract. And so that's the piece that's currently on Mainnet. The proof aggregation and the guarantee of safety and chain level accounting is still being built out, which is why the current implementation has training wheels and the things that Justin was alluding that provide safety in the short term.
Speaker B: How long till we get to that first major milestone where we have polygon proof of stake, working with the Polygon ZK EVM chains all on AG layer, how long do you think that'll take?
Speaker C: So I'm hesitant to give a date because that's a dangerous and risky thing. But I would say sooner than people think. Yeah, so I think six months.
Speaker B: Sooner than that.
Speaker C: Probably sooner than that, but we'll see. Let's be conservative.
Speaker B: Okay. All right, so we'll measure that in months. So we get there in months, and then once that happens, we get kind of like this new set of chains, obviously the CDK chains, but even beyond that, you mentioned near and some others, and then you also mentioned this tantalizing opportunity. Now, chains don't have to bootstrap all of the liquidity, don't have to bootstrap all of the network effect. So in addition to all of the existing chains we know and love today, now it becomes like very easy to kind of create a new chain on top of egg layer.
Speaker A: And so you need even less reasons to spawn a chain.
Speaker B: You start to collect some of those new chains as well. And so, like, one way to measure this chain interoperability, I guess, is number of chains that are hooked into ag layer and also like assets, total number of assets that are hooked into ag layer. And I'm imagining once you get to kind of polygon on this, we have in the, you know, in the billions of assets on top of ag layer, we have new chain. So maybe we're in the dozens of chains department. What happens after that? Another major milestone to me would be a non, like, maybe what could be considered previously a competitive EVM ecosystem now also joins AG layer as well.
Speaker A: Avalanche on the AG layer?
Speaker B: Yeah, like avalanche. I don't know. It has to be ZK, right?
Speaker A: ZK avalanche.
Speaker B: Well, let's start with Zk, like Evm. Let's say the fine folks over at matterlabs or scroll start to join this thing.
Speaker C: Sure.
Speaker B: That would be a next major phase. How long will that take and what has to happen for that?
Speaker C: So I do think that there are like political and narrative challenges around that view, but I think that the really interesting thing about this idea is that you start to see network effects develop around Ethereum rather than around a single competitive ecosystem in the l two world. I think that what you're describing, I think the TVL and the amount bridged will increase very, very quickly. I wouldn't be surprised if we see like over 10 billion in TVL within the next six months. And so I think from there chains will realize maybe it doesn't make sense to build a competitive AG layer that's branded to a certain particular ecosystem. And maybe it makes sense instead to try to build around this shared infrastructure that's being used by like all of the Ethereum l two landscape, because there aren't really trade offs. You're not giving up anything. Matterlabs or scroll or whoever. They can still run their own sequencer, they can use their own token, they don't have to pay rent to Polygon. And so I think it's a world in which it starts to make a lot of sense. For if you're launching an l two ecosystem and you believe that what you've launched has positive economic value and is bringing something new to Ethereum, then why wouldn't you tap into this existing liquidity? It will just flow. Users and activity will just flow seamlessly and frictionlessly to your chain. I wouldn't be surprised, I can't say when that will start to happen, but I wouldn't be surprised to see more uptake among other l two ecosystems that are sort of nominally competitive with polygon. But this ag layer vision is not centered around polygon. Polygon chains don't get special treatment in this world. There's nothing that is exclusive toward Polygon. And so I think it's much better for everyone if we think about growing the pie and engaging in positive sum games to grow the overall ethereum ecosystem.
Speaker B: Justin, I want your weigh in on this, because this is as much a social coordination thing as it is a technical. And I think we got from Brendan some of the first major milestones. And to me here is like, we're at milestone one where we have a couple of chains and kind of like this beta version of ag layer. And then a big milestone is we get the polygon proof of stake chain. We got kind of like a broader ecosystem. We get there, and now we have maybe tens of billions in TVL that's all united. And that's what we're trying to do. We're trying to unite the liquidity, and we have maybe dozens of chains. And then we get to another milestone. And Brendan seems optimistic on this. I hope we can get there, which is competitive. ZK chains actually also start using this as a solution, and then we unlock more tens of billions in TVL and dozens of chains. And maybe we're at the phase where we're coming up on 100 and types of chains here. How long do you think that plays out? Are these the right milestones? And then after that, we're only uniting the ZK world here. How do we get the rest of the chains and go collect the other ethereum chains? Justin, can you lay this out in maybe an optimistic way of how you think this could happen?
Speaker D: Right. So I think I need to think about it more. But what makes the most sense to me today is to have a two phase approach. Phase one is where every single ecosystem, so the optimisms, the arbitrums, the polygons, the scrolls, the zksync, within their little clan of chains. They experiment and they try things out. And we all learn as an ecosystem, because all of this is open source, all of these are ideas in the public domain. And then step two would be mergers, in some sense, of these shared sequences, or mergers of these aggregation layers. And I think the most credibly neutral way to merge ecosystems is to basically shed all the branding, shed all the proprietary repos, ideally build the thing together, and then have some sort of credibly neutral ERC that standardizes this merger in such a way that everyone feels comfortable with this merger. We're not asking necessarily optimism to join the polygon aggregation layer. We're not necessarily asking polygon to join Zksync's thing. But maybe there's a third thing that we can create. We can call it the Ethereum something, and everyone will be comfortable moving towards that. And I think this is where maybe the film foundation plays a role as a coordinator, because we're meant to be this credibly neutral party that creates credibly neutral playing grounds. And so at this phase today, I think we're still at the ideation and discovery and experimentation phase. And once we feel comfortable kind of enshrining in standards, not enshrined consensus, but enshrining in standards something, then we can do it, as is usually the case in Ethereum, is that we're slow, we want to do things properly. We're probably going to want maybe client diversity, maybe this credibly neutral, smart contract is actually implemented three different times. Maybe we need formal verification. I wouldn't be surprised if this is a multi year process. But what I think is great is that the experimentation can start today. And as Polygon has shown, there's already two chains that are sharing a deposit contract.
Speaker B: Justin, I think, just like, because we've called this the united chains of Ethereum, just by way of analogy, I think the big question for Ethereum is, can it hold the union together? Basically, is it going to devolve into fragmentation and different islands of state in different countries? Or can we unite all of these chains? Can we unite all of the states and form one sort of a nation, if you will, an actual united chains of Ethereum? And I don't think that's an existential question. I think Ethereum will be fine either way, as a credibly neutral settlement area. But if it does manage to unite all of the chains, my God, it will be absolutely unstoppable and a force to be reckoned with. And it would be absolutely incredible, because that is the biggest win and the biggest upside for Ethereum. But that's why we're spending so much time talking about this, because, man, it's a coordination problem. It feels very much like the early days of in the United States anyways, kind of like these ideas of federalism and how do we form this kind of lightweight governance structure under a constitution, get all of these disparate economies kind of working together that were somewhat competitive? Can we solve that? That is the meta question today.
Speaker D: Yes, I resonate very much with this, and it gives my work a lot of meaning. In the last few months I've been on this mini crusade around shared sequencing, and I've learned a lot during the process, and I'm very much delighted with how much the ball has rolled forward. A lot of ecosystems, one by one, are starting to appreciate the benefits. And it's a little bit like this, this meme with the dominoes. There's the tiny domino, and then the dominoes grow in size. And I think we're just starting with the smallest of dominoes. And the way that I described it in the very first episode on fixing fragmentation is that I think of this as a trillion dollar coordination dance. Can we do this as an ecosystem? My God, how fast have we moved forward and been able to coordinate? So, for example, a few days ago, literally, in London, we had the Ethereum sequencing day, where 50 builders from all sorts of roll ups and infrastructure providers came together. It was a full day of workshops, and we made these many technical breakthroughs, and there was these mental unlocks that, wow, this is something that I'm interested in. I don't want to leak too much alpha, but some really big names are now planning to become base rollups purely based on this one event. And so I'm optimistic that we're moving in the right direction and I will be continuing my crusade for the next few months.
Speaker C: Yeah, I think that's a lot of reason to be hopeful. I was just going to say that it also parallels the development of the early Internet. There were a lot of geographically distributed networks that were all competitive and you couldn't easily exchange information between them. I think a lot of the things that we take for granted about the Internet, the fact that it's a unified environment where you can access information you don't have to think about. I'm in North America, but I want to access this website that's hosted by a server in Europe. I have to bridge my packet across the Atlantic Ocean so I can access that data, but that's complexity that we force users to take on constantly in crypto. And I think this whole vision that Justin's outlined and that we're working on around shared sequencing and the aggregation layer is a really tangible step toward creating this Internet of value, or value layer of the Internet, where you have a unified environment where you can access value and liquidity regardless of what chain you're on Orlando, where your funds are. And so I think it's cool because the development of crypto has been characterized by us seeing periods of momentum, and then we run into these brick walls of scaling limitations. And it's very, very painful, and I think it limits the growth of the industry. And I think that this is finally an opportunity where we can have horizontal scaling, but not at the expense of bad ux and complexity and fragmentation. And so I think, I mean, I'm super excited and optimistic about it.
Speaker B: I hope we get to one Internet of value as well. The way that TCP IP kind of like dominated everything and the way it won, I think, is through credible neutrality. And it became sort of the protocol that everything else was using. My early Internet knowledge is kind of hazy, but I recall people like Bill Gates thinking that there would be sort of these separate, siloed, corporate driven networks, like the information superhighway wouldn't quite be the open TCP IP style Internet that we see today. And he lost those battles due to, I think, TCP IP being very simple, very dumb, very credibly neutral. Everyone could participate, completely permissionless, completely open. And if Ethereum wins, that's how it'll win. I think that the final test for Ethereum is to totally prove that is, not only do you get sort of the quote unquote Ethereum aligned roll ups to join AG layer, let's say, or to join Ethereum, you also get the quote unquote competitive layer ones, you get Solana on top of this potentially. And they decide to join.
Speaker A: Why?
Speaker B: Because it's irresistible. They have a fantastic execution environment, fantastic user base and tools and all of these things, and they want to tap into the liquidity, the union of all of the Ethereum chains. If we can get there, then we will have one Internet of chains. And I hope we do get there.
Speaker A: I kind of want to suss out the AG layer. We've been poking at it from the bottom up. I'll say I want to poke at it from the top down. Two chains on top of the AG layer right now, polygon ZK. And then in the future, Polygon. Proof of stake. Let's imagine both of these things have a Uniswap implementation. Now there's two Uniswap on the AG layer on two different chains, and then I am a user and I'm like LP and also trading on one version of Uniswap. What is that relationship with the other Uniswap on the other chain through the AG layer? Walk us through a USDC ETH trade on one Uniswap and its relationship to any other Uniswap that's on the AG layer.
Speaker C: Yeah. So I think this is a really interesting question, and I'm not sure what the end state looks like in terms of the topology of how liquidity is arranged in a multi chain environment. I think that you can imagine it in maybe two forms. The first form, I would say, is a hub and spoke model where you have a single chain that basically hosts the super, super deep ETh USDC pool. It has a ton of liquidity. Everyone's all peeing on this chain, but it's relatively expensive for users to transact because they're just client limitations where the client can only execute, let's say, a few thousand or a few hundred transactions per second. The way that we scale access to that pool is we have low cost chains where fee sensitive users can batch their trades, and those batches will be executed on that single shared, like, super deep liquidity chain. And the cost of that execution is amortized across all the users in the batch.
Speaker A: Okay, just to make sure I understand that there's extra cost if I am on the super fast cheap chain and I'm not on the very liquid more expensive chain, which makes sense, like liquidity and security and expensiveness kind of go together. And so I'm a user on the cheap chain, but I want to make a trade and I want to access the liquidity on the very, very liquid chain. There's extra costs because I'm not on that chain.
Speaker C: No. So there's no extra cost. But we assume that the place where the liquidity is, like you said, is expensive because you have whales and market makers and users that are transacting a lot of size that are competing for priority and for block space on that chain. I think that's one model. The hub and spoke model is one, then the other one. I think Justin alluded to this earlier, where you have pools that are sharded across multiple chains, but you have universal synchronous composability that allows for basically instant arbitrage and rebalancing between those pools. Market makers and institutional traders submit bundles in order to rebalance and provide a consistent execution and price between those chains. I have to confess, I'm more of a ZK researcher than a Defi one, and so I'm not sure which of these is more compelling. Justin, you might have a better intuition than I do, but when I've thought about it, it seemed like those are the two competing models for how the topology of execution and trading would look.
Speaker D: Right? I guess the first model is basically the app chain. And I think this makes a lot of sense when the app has to be in one single place. And I think maybe the best example is Ens can't be in every single chain. At least the root of trust needs to be in one place. And when I was in London, someone from ENS was telling me that they want to move to an l two because they want lower fees. But they have a problem, which is credible neutrality. If they pick one ecosystem over another, if they pick arbitrum, well, they're going to piss off everyone else. If they pick optimism, they're going to piss off arbitrum and vice versa. And so really the only thing that they can do is launch as an app chain. And then the question becomes, for example, which sequencer do we use? And it's the same thing here. They could choose to adopt the optimism sequencer or the arbitram sequencer, but that would not be credibly neutral. They basically only have two credibly neutral solutions. Either they launch their own shared sequencer, but that is not great because it's more complexity. Now the liveness of your chain degrades to the economic security of this new sequencer. Option two is to basically adopt the base sequencer. One of the things that I want to tie off from the beginning of the conversation is that scaling is not only about transactions per second, is not only about bytes per second at the data availability layer, theres also a quality aspect. We all know the notion of economic security. So the reason why Ethereum block space is so much more valuable than some other chain is because Ethereum has over $100 billion of economic security, and that is shared across the roll ups. But another aspect of quality, which is often underappreciated is credible neutrality. And then the final aspect of quality is composability, right? Which is what the aggregation layer is all about. And so in some sense, what I hope l two B does is tries to maybe modify its website a little bit to take into account these effects. So one of the things, the ideas that I had during the call here is that when showing TVL, maybe don't show them at the execution level, but show them at the shared sequencer level, or show them at the aggregation level and also maybe have some sort of a notion of how credibly neutral the sequencer is and things like that.
Speaker B: Justin, I want to make sure I understand that ENS example. So they could either launch, so they want an app chain understood. They want a layer two. They can either launch with their own shared sequencer, which is a pain, or they can use, do you say a base roll up shared sequencer, or use ethereum as the shared sequencer?
Speaker D: Exactly. They can just reuse Ethereum as the shared sequencer. So reusing the layer one proposes, that is basically what it means to become a base roll up, to adopt the base sequencer. And in doing so, there's no degradation of security and liveness. There's no degradation in credible neutrality. And also in some sense, there's no degradation of network effects because the TVL of the base roll ups will include the TVL of the L One, which is half a trillion dollars. So in some sense, when Tyco launches in a few weeks, as the very first base roll up, from day one, at least from the point of view of the sequencer, they will have the most TVL of all the chains. They will launch and they'll have half a trillion dollars of TVL. But this is not reflected, of course on the layer two beat website, which is why I think it would be good to showcase these larger network effects at play.
Speaker B: And then how would ens do this? Do they just adopt espresso or something like this? Because espresso is kind of like tapping into based Ethereum sequencing. Is that a way they could do this?
Speaker D: Right, so it turns out that there isn't like one necessarily base sequencer that could be multiple base sequencers. I guess the most simple and maybe the most credibly neutral base sequencer is just to reuse the vanilla sequencer that Ethereum has. And I have a write up about this, but there might be good reasons to have a modification to the vanilla base sequencer, which could be the espresso one. Now the two kind of bells and whistles that I guess are worth highlighting of the espresso based sequencer is one, it has mev rebates. So if you're an app chain that creates a lot of MeV and you don't want to sacrifice this to the base sequencer, well, espresso maybe has a solution for you. So there's more incentive alignment. And then the other thing that they provide is basically this shorter block times if you want to do pure l two transactions. But ens, if it's perfectly happy with the twelve second block times and it doesn't generate mev, then maybe it's perfectly fine just adopting the vanilla base shared.
Speaker B: Sequencer while we're on espresso and shared sequencing as well. Brendan, did I hear that there was a partnership in play between AG layer and espresso? Talk about that. So what does that even look like? What's the nature of the partnership and what value does it create?
Speaker C: Yeah, so I think just at a high level it's like my understanding of shared sequencing and sort of like interchange coordination has really, really benefited from speaking with Ben and obviously speaking with Justin. And so I think this is an effort to continue that collaboration and to really work together, because like we said earlier in the episode, the AG layer doesn't work without coordination mechanisms like shared sequencing. And so it really, really makes sense for us to work alongside projects that are working on shared sequencing to create a better experience for users and developers and chains. And so this partnership is something that we're really excited about, and I think it's going to be really good for, for the AG layer and for Ethereum.
Speaker B: Justin Brennan, this has been absolutely fantastic. I'm wondering, in conclusion, Justin, because you've been along for the ride on this whole fixing fragmentation series, and here we are in March of 2024. We've talked about shared sequencing, we've talked about based roll ups, universal synchronous composability for all of you, Ethereum and now AG layer, and we're talking about uniting Ethereum, uniting all of the chains. I'm curious, where do you think we will be in Ethereum toward that end? The end that you are spending so much of your personal time on a crusade, as you called it, within, say, twelve months? What will that look like? Can you paint us the landscape from to March of 2025?
Speaker D: Where will we be in March 2025? I hope that we'll be in a position where all the large ecosystem will be experimenting with their own shared sequencer, as well as with their own aggregation layer. And that there will be the emergence of rough consensus around what is a good design, and that there will be initial discussions for standardization and for the creation of a truly unified, not just at the ecosystem layer, but at the whole Ethereum layer infrastructure that everyone feel comfortable opting into. So yes, it will take time to get to this final vision of the United chains of Ethereum, but I think we can basically do this incrementally as discussed. Step one, ecosystems. Step two, all of a theorem.
Speaker B: Thank you guys for joining us. This has been absolutely fantastic. Justin, Brendan, great work that you're doing, and we appreciate you coming on.
Speaker C: Thanks for having me.
Speaker B: Bankless nation got to end with this. Always the disclaimers, because crypto is risky, you could lose what you put in. But we are headed west. This is the frontier. It's not for everyone. But we're glad you're with us on the bankless journey across all of the chains. Thanks a lot.
