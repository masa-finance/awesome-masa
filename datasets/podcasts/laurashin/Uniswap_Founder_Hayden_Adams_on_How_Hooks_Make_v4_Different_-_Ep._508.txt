Speaker A: Hi everyone. Welcome to Unchained, your no hype resource for all things crypto. I'm your host, Laura Shin, author of the Cryptopians. I started covering crypto eight years ago and as a senior editor at Forbes, was the first mainstream media reporter to cover cryptocurrency full time. This is the June 20, 2023 episode of Unchained. You know it, we know it, they know it. The system doesn't just need an update, it needs a complete rewrite. Web three offers that rewrite. It allows us to take control back and to truly own what's actually visit okx.com rewritethesystem to learn how Asia is buzzing and everyone's going to token 2049 Singapore on September 13 to 14th. Balaji Sreenivasan, Mike Novogratz, Arthur Hayes and 200 others will hit the stage, joining over 10,000 attendees. Visit token 20449.com for 65% off with the code unchained link in the description. Buy, trade, and spend crypto on the crypto.com app. New users can enjoy zero credit card fees on crypto purchases in the first seven days. Download the crypto.com app and get $25 with the code Lora link in the description. Hey unchained listeners, as you know, its hard keeping up with a fast paced world of crypto, so weve got just the thing for you. Subscribe to our free unchained daily newsletter at unchainedcrypto dot substack.com. youll get the latest crypto news and original articles from our reporters, as well as summaries of other happenings in bullet points, plus our meme of the day, all curated and written by our amazing team. It's still your no hype resource for all things crypto, just in newsletter form. Sign up at unchainedcrypto dot substack.com. again, the URL is unchainedcrypto dot substack.com dot. Today's guest is Hayden Adams, founder and CEO of Uniswap. Welcome, Hayden.
Speaker B: Thanks so much for having me.
Speaker A: It's amazing that Uniswap is onto its fourth iteration already. Let's walk listeners through the evolution of Uniswap from v one through v three.
Speaker B: Sounds great. And before I even say that, I just, maybe, I don't know if you know this, but Unchained was actually the first podcast I ever did last time we spoke.
Speaker A: Yeah, I don't know if I knew, I might have known that. It was so long ago. It was like 2018, wasn't it?
Speaker B: Yep. V one launched in 2018, and I don't remember exactly when we spoke, but it was around then.
Speaker A: Yeah, yeah. I also don't remember exactly, but amazing that it's been five years because it feels somewhat recent to me, which is kind of funny. But anyway, I'm glad that you made Unchained your first podcast choice.
Speaker B: Yeah, definitely. It was great back then and excited to be here now. In terms of the evolution, I think even what you just said there, in some ways, it feels like we think of Uniswap as having been around for a long time, and amms and all this stuff that we talk about with on chain trading. But Uniswap has only been around for five years, and before Uniswap, there were other projects experimenting with Amm, but it was a relatively untested new thing. And going from Uniswap V one, which launched in November 2018, back then it was like, is this a thing? Will this have a place in the world? Is there some need for on chain trading? And is there some need or automated market making to today where Uniswap trades billions of dollars a day? There's been over one and a half trillion dollars traded since then on the protocol, and it has such. Amms are actually the predominant way people trade between crypto to crypto assets on chain. Back then it was like, does amm have a role relative to limit orders? And today it's like, oh, do limit orders have a role relative to amms in the space of on chain trading? Which is really interesting, probably jumping the gun on some stuff there. Really. Uniswap V one built that initially almost as like a solo side project. It had a lot of help along the way, but essentially was the only full time person on it. Developed it under a, got a grant from the Ethereum foundation and launched it in November 2018. It got all this initial excitement and traction in the industry, I think in part because it really resonated with people's values in the space at the time, it was kind of the anti hype. There was all these projects that had set huge expectations, raised huge amounts of money, and then didn't really deliver on the hype. Uniswap, all it had was this small grant. No one knew about it until it was live and working, and it really resonated with people, and it really matched the level of decentralization that Uniswap reached, where it was not upgradable, immutable, permissionless. Anyone could create an asset. Anyone could create a liquidity pool that resonated in the early days. And so it got this initial traction and excitement from almost like long tail projects on Ethereum. And so I raised money and formed a company. I was like, just the idea to me had been validated. So I decided to take it to the next step and form the company.
Speaker A: And just remind people those original pools were based on that. X times y equals k. Just explain that for people.
Speaker B: Yeah, I mean, it's not really. The idea is that in traditional exchanges, you have limit orders and you're matching up buyers and sellers. Uniswap had this pooled liquidity model, where you deposit two tokens into a pool. They would be paired against each other, and you could buy one for the other and sell. You could buy and sell between them, and it would just move the price along a curve, and that curve is just x times y equals k, where there's a constant value. And that was how prices were set. It was very simple, very simplistic, but it worked. And I think that that is such a key to this whole story, is that there was a lot of early, the earliest negative baby feedback that Uniswap received was like, this is too simple and too dumb. You can't just create a stupid, dumb on chain trading strategy and expect it to be profitable for people to do or beneficial for people to do. And I think in a way they were right, in a way that was too stupid and dumb to really exist forever. But at the same time, it provided the benefits of it, offset the downsides of it, if that makes sense. The level of decentralization it achieved, the level of the fact that no one needed to trust anyone else, the fact that anyone could create a liquidity pool without having to have an extreme level of sophistication. Yes, it wasn't sophisticated enough for the most sophisticated people to want to come in and participate in it, but it was unsophisticated enough that anyone could participate in it. And the ability for just anyone to create a liquidity pool was so different and new from anything else that was around at the time. Even other early amms didn't have an experience where anyone could come in and create a pool, at least even at the front end level, if it allowed it at a smart contract level. So that was such a big unlock that it didn't matter how inefficient the system backing it was at the time, because no one else. There was no other way to do the things that allowed you to do for certain people. From there, we spent the next four or so years basically building new versions of the protocol. Improving it. V two took it from V one, basically only allowed you to trade between ETH and an ERC 20 token. And it was kind of an interesting, very opinionated. Simply, it was my first coding project is one way to look at it. And so it was okay, but it wasn't a system on which an entire industry could be built, to put it one way. And so V two really was just upping the architecture, the code quality. It did add a few more features. It allowed you to trade any ERC 20 for any ERC 20, which enabled things like stablecoin to stablecoin trading instead of just eat the stablecoin. So it added a few new features. It was just better infrastructure, easier to interact with, but it wasn't just a better code base. And that was sort of what going into at the launch of V two, probably uniswap was doing a few million dollars a day in trading, maybe like five to ten. And that was in spring 2020, about a little bit over a year after the launch of V one. And that is when things went crazy. And we had what was called Defi summer. And Uniswap V two went from doing like 510 million dollars a day in trading in the spring, to by the fall, it was doing. It had passed a billion dollars a day in trading. There was a token added to the protocol every ten minutes for the entire summer.
Speaker A: And just as a reminder, also, I think that milestone was also reached, partially because of the Sushiswap vampire attack.
Speaker B: Yeah, for sure. Definitely. There was. I mean, it was growing really fast over Defi summer as, like, compound had launched and all these other projects had launched, their tokens and more tokens were starting to come out. And so it was already accelerating. But then definitely when Sushiswap happened, it really did go parabolic. At that moment, uniswap liquidity went from a few hundred million to a few billion. And then the daily trading also went up proportionally. And I think the reason Yu Sushi was so good for Uniswap was because there was sort of this, like, chicken egg problem of people. Like, there wasn't enough liquidity to support the volume, to support the liquidity. And we didn't really know how Unisop would operate at that scale. And the sushi vampire attack, because of the way that it was structured, really incentivized liquidity to pour into Uniswap. And the plan was to migrate it all at once. But so much liquidity poured into Uniswap that people got to see how it operated at billions of dollars in scale, as opposed to low digit hundred millions. And it sort of performed very well. And so I think that, you know, even after the sushi vampire attack migration happened, the liquidity didn't really leave Uniswap. I mean, some liquidity did, but Uniswap's liquidity after the vampire attack was much higher than it was before. And definitely the whole, you know. And then after, after all of that, there was even more projects launching. And that was like, really like a pretty kind of a moment of a lot of change in the space. We had actually been working on V three since before the launch of V two, though V three is the earliest ideas of V three development were ideas that we'd been playing around with while developing V two. And so even at the time we launched V three, we realized concentrated liquidity was the next step. And I think that for a while, some of that stuff felt like it was a distraction from getting to where we knew we wanted to go with V three. I think ultimately, I'm glad it all played out and it worked out for the best, and it was an exciting time. But we launched V three about a year after V two and about six months after the whole sushi saga kicked off. And V three basically made the protocol a lot more. V two was a very simple price curve, and everyone had to opt into the single way of managing their liquidity and trading it. It was somewhat inefficient, but it was the same for everyone. So it was so simple, anyone could do it. And there was no competitive dynamics between LP's because they were all in it together, for better or for worse. But I think the downside was sometimes it was for worse. V three came out. I think at the time of V three, there was a lot of open questions. I think it took a long time for people to understand it. I think people are still wrapping their head around V three, even today. It came out about two years ago. And it basically just let people set price ranges in which their liquidity existed in the sort of. You can. It can. You can kind of approximate an order book with it a little bit like you can imagine. Like, if you set a. You know, I'm going to trade this token between this price and this price in a very narrow range. That looks very similar to creating a limit order. I think it's still kind of different. You know, there's sort of like a pro rata nature to it, where you're still pooled with other people and it's still along the curve, not at a single price. But all that to say V three increased like the, essentially increased the capital efficiency, it increased the flexibility for liquidity providers very significantly. But maybe to lead into where I'm going with V four, I'd say that V three was still an extremely opinionated protocol. And what I mean by that is the way that we developed V three. V three was essentially the best single implementation of an Amm that we could imagine at that time. And I think it did very well. V three kind of took uniswap from significant market share to today it's 85 90% on chain trading on Ethereum, and has just sort of completely outperformed the V two style pools in terms of the share volume and the efficiency of it. But it was very opinionated. The process of basically designing an amm, in my experience, has been getting in a room with smart people and just arguing for hours about trade offs and minor trade offs. It's just endless. Bike shedding is one way to think about it, you know, and every single decision we made impacted other things other. And it's like things that benefit LP's hard swappers, things that benefit active, you know, increased complexity adds new features, but, like, makes it harder to integrate and that hurts developers. And every single part of the entire codebase was just like a constant series of trade offs. And I think that that's what's to me really exciting about where the Uniswap protocol can evolve. With Uniswap V four is, you know, to me, Uniswap V four is about taking, creating a basically like an AMM platform where people can express their preferences and choose where they want to be in like the AMm design trade off space. And definitely it adds additional complexity and there's a lot of things that, that, you know, there's a lot of implications to that. And I think that, like, people are still wrapping their heads around V three, they're definitely still just wrapping their heads around around V four. But for me at least, I think that I feel really confident about it as like the direction for where this protocol should go next. And so I'm personally really excited about it. The Uniswap protocol has become such a important part of the industry. There are quite literally thousands and thousands of teams and projects. There's hundreds of thousands of tokens on the protocol. There's tens of thousands of projects that are built on top of it. And to me, I view Uniswap like I view Ethereum, and it's a core infrastructure layer for Ethereum maybe is of course, infrastructure layer for more things, but Uniswap is still like this core infrastructure layer for creating liquidity and trading on chain, and it serves all of these different projects.
Speaker A: Just one thing is that when you say it's like Ethereum, it's not only Ethereum in those ways, but I feel like this new V four is also becoming more like Ethereum in the sense that when Vitalik was dreaming up Ethereum, part of the reason was that he was noticing that people were trying to innovate on bitcoin, and the way that they were doing it was adding new features to blockchains and both of you. So with Ethereum, what he did was he stripped all that away. It's like a programming language, and then anybody can have any idea that they have an upload it to Ethereum and you're essentially doing the same thing, but for amms, and you're. I don't want, I mean, I don't want to describe it, but just very briefly, you're stripping it down. So like other people can be like, oh, I have an idea for an amm that does fees this way or that it does. I don't know what all the different variations are, but it's literally the same move.
Speaker B: Yeah, definitely. I think that totally resonates with me. And I think that I definitely have looked to Ethereum as guidance for what I think is a good project within the crypto space and has good philosophies behind it. And there are a lot that can go into that and there's a lot that you could have back there, but it's definitely like a move towards greater expressiveness and customizability. Generalizability. And it's not Turing complete like Ethereum, but it is closer to Turing complete than, you know, than uniswap v three in that you can express more preferences and do a lot more with it.
Speaker A: So aside from that, in fact, that you were sort of dictating choices onto developers, there were also actual problems, just like with using it and stuff. So what are some of the problems that you wanted to try to solve with Uniswap V four and what are the features and solutions that you've come up with?
Speaker B: Yeah, that's a great question. Let's see. So Uniswap V three, I'd say that for me, some of the most interesting, I say that like, one very interesting starting place is fees, like liquidity provider fees, not, you can ignore the other forms of fees, of gas fees and governance fees and all that. I'd say that, like, liquidity provider fees, and for like, the longest time in uniswap history, it's always been like, what is the optimal fee and how do you set it? And all of these for liquidity providers? And the answer has always been like, the v one. It was like, okay, we're just going to, we don't want to introduce some governance system. We don't want to introduce some, let's just make it 0.3% of. And that was the number. It was a magic number. And it kind of worked in a way. Actually started out as 0.25%. And I was on a plane with Vitalik, and we were having a conversation, and he said, and I was like, oh, I don't know. I'm worried 0.25% might be too low. And he's like, we could do 0.3%. And I was like, okay. And I changed the code. And that's how it happened. That was all the thought that went into it. Vaguely looked at. V two kind of had a similar pattern. V three introduced features, which was basically like, anyone could deploy. You could deploy pools with a bunch of different features. And the idea here is that the more sophisticated liquidity provision, the more trading volume that's going through a pool. Probably very often lower fees are better than higher. Another thing is the volatility of the asset, a very volatile asset. You might need higher fees to make up for losses that you might incur for providing liquidity. When you're providing liquidity, you are taking on price risk. And the way that you offset those losses is you earn fees. And so if an asset is very volatile, you usually want higher fees. However, there is this other thing, which is that there's different forms of volume. There's some volume that is just driven by volatility, and then there's some volume that is driven by just user demand to trade an asset. And there's papers theorizing around the optimal way to set fees based purely on volatility. And if you imagine a world where the only trades that exist are arbitrage trades, probably going way too deep on this one very specific thing. But if you imagine a world where the only trade to arbitrage trades, you can theorize around the optimal fee to set, but you don't know how that optimal fee will impact the user's demand for trading into that liquidity. That is not driven by arbitrage, but driven by just a desire to trade one asset for another. Some people, you think of the users as maybe the less sophisticated, and the arbitrage traders as the more sophisticated. So there is no single way to set the optimal fee. The only way to do it is in imagining an arbitrage only world. In the arbitrage only world, the higher the volatility. But then there's also another factor of gas costs, and the lower the gas fees, actually, the lower the optimal fees for liquidity providers. And that's because the lower the gas fees, the smaller arbitrage trades are worth making. And so if you lower the liquidity providers fees, you have a lot more arbitrage closer to the current price. And so there's sort of, like, this benefit of having in a lower network fee world, you also want a lower liquidity provider fee world. So there's, like, all of these, like, it's kind of a complex situation. And so there are, like, a lot of interesting ways to experiment with setting it. Sorry. With v three, we had, like, a few different granular features. Like, we had, like, 1%, 0.5%, 0.3%, and 0.1%, something like a few of them. And that allowed people to, like better liquidity providers can make their own choices and allocate across them, and that increase the flexibility while fragmenting liquidity a little more, and there's a gas cost imposed. The more liquidity split across liquidity pools, the more gas costs you're wasting to arbitrage between the pools. And if I want to make a trade, and it's a very large trade, I now need to route, maybe some portion of my trade should go to the 0.3% pool, but only up until it moves the trade 0.3%. But then the remaining should actually now, or, like, once the trade, like, the price impact has increased beyond maybe a better example. So if you imagine a 0.3% pool and a 1% pool, if you make a trade that moves the price on the 0.3% pool, more than 1%, you're going to want to start including liquidity in the 1% pool, because the price impact of the 0.3% pool is no longer offsetting the fee of the 1% pool. These are very fundamental problems. The more pools you have, the more liquidity is fragmented the same time. The more, like, the less you can express your. At the same time, there's no single best way to determine the optimal fee. And the way that it works on an order book is just everyone is choosing for themselves, and it's very efficient to aggregate that all on chain or off chain. And it's not very efficient to allow anyone to set any fee and aggregate all of that on chain. And so you kind of need liquidity to coalesce around certain features. I'll just say with Uniswap V four, I think one of the most interesting problems is it basically just says anyone can create any system for how the fee is set. You can continue to do dynamic fees or you continue to do static fees. There probably will still be 0.3% fee tier pools, but there might be this fee tier moves with volatility, and you can create systems like that as well. I think that it's going to be very interesting to see. I think entire amms have been created to just experiment with fee designs. And I think something that's very nice about Uniswap V four is you actually don't need to create an entire amm to experiment with fee designs. You can create a fee like a dynamic fee hook, which is much simpler and easier to do than creating an amm. And it's much easier to get people to trade into it, and there's much more adoption of it and just explain.
Speaker A: Hook, because this plays a key role in Uniswap v. Four.
Speaker B: Yeah, Uniswap V four introduces what we call hooks, which are various points in every transaction on Uniswap has a lifecycle to a transaction for a swap, maybe you send the tokens to the pool, the price adjusts, and then the pool sends your tokens back. The idea of a hook is that it's arbitrary. You can insert arbitrary logic when you create a pool. You can define the hook logic for that pool. You can create a hook contract that interacts with various points in the lifecycle of a transaction. You could imagine you have a hook that before every swap, it runs some arbitrary logic, or you can have a hook where after every swap, it runs some arbitrary logic, or before anyone adds liquidity. And through these hooks, you can basically create. You can also have hooks that basically adjust the fee for the pool in real time. And maybe it's doing that by before the swap, it checks the price, and based on the price relative to the previous price, it has some implied volatility number and adjusts the fee up or down based on that. That's the type of thing that you can start doing.
Speaker A: But at its core, a hook is like an external smart contract that's interacting with the Uniswap protocol. Is that how to think of it?
Speaker B: You can think. I mean, that's one way to think about it. There's sort of like how the smart contracts are organized, is interesting with Uniswap and we could get that a little bit. But generally speaking you could think of it as smart contract logic that can interact with the protocol at various points within like, not like today. You have transactions that can interact with the pool, but they can only interact before the entire transaction has happened and after the entire transaction has happened. But there's no way that you can interject at points within a transaction. Generally speaking, it's logic that you're guaranteed will run with every transaction that interacts with that pool. I actually saw, I listened to a 32nd clip with what is it, chopping block where they were talking a little bit about what's different here and what can you do externally versus within a hook. And what is like I think an example of something that you can do that you can only do with hooks that you can't do today externally is there's a certain like, so one of the features in uniswap v two and v three is this price oracle. And for the price oracle to be, you know, to work, you need a guarantee that it will be updated before the first swap of every single block. And to have that type of strong guarantee, you can't do that externally because you could build a router that checks the price before it swaps and checkpoints it. But someone else can always interface directly with the pool and avoid updating your oracle. And so the cool thing about the hook contract or the hook design is that you can create a pool that will guarantee the properties of your oracle in a way that a hook in a router could never do. That's an example. I think there are others. Another maybe example, part of where hooks came from is since before v two, we've had this running idea in the back of our head and you've probably heard some of the around essentially what would amount to a back running hook. This idea that if someone makes a trade that moves the price away from the current market price on Uniswap, that creates a profitable arbitrage opportunity that someone else can capitalize on. And generally speaking, if you're a liquidity provider on a pool, everyone wants to internalize as much of the value as they can. If you're creating a valuable opportunity for someone else, you'd rather take it yourself. And so there has been the idea floating around for a long time of well, can we have a, at the end of every uniswap trade it calls to a smart contract. That smart contract has the right to back run that trade. If it pays some of the profits back to the swapper. That was an idea we've been playing, or liquidity providers either way. And that was like an idea we'd been playing around with in our heads for a long time. And to make that work again, you need a guarantee that every swap, otherwise people won't swap to the router. If there was a router that lets you back that if liquidity providers are depending on an external system to do this back running, then people are just going to trade through a different router that doesn't do that because you have this. This ability to guarantee properties for liquidity providers, for swappers, for whatever, for external projects that you don't get with externally built systems. The other thing that I'd say is that the smart contract design patterns of building some of these things externally are a lot more complex and messy and inefficient than building them internally with hooks. I think that's another important factor where definitely a lot of things that could be built with hooks can be built externally, but there are fundamental benefits to doing them with hooks. In terms of it's built into the pool you sort of have. There are often efficiencies or better smart contract design patterns that you get there.
Speaker A: Just to understand who is going to be contributing these hooks, who develops them, how does it get decided, what gets adopted?
Speaker B: It's a little bit like asking who's going to build smart contracts on Ethereum. And it's like there's probably a lot of people and a lot of different reasons. I'd say that some examples, for one, we've built a few hooks even as examples to prove the system that we find interesting and useful. One hook that we built is what we call twam, which is we can get into what that means and what it does, but it essentially makes it much easier for people to make very large orders on the protocol that execute over a long period of time. And we think that that's like an interesting feature. We don't think that building as its own custom amm would be a lot more work and infrastructure to maintain. And so we haven't developed it as a hook. We built a limit order hook, which we find interesting. We built, surprise, Oracle hooks. So we built a few.
Speaker A: So I'm sorry, I need to understand this because the time weighted average market maker is for people who, it's probably like a whale who wants to make a huge order that would typically move the price a lot, that would cost them a lot. So what they want to do is they kind of want to chunk their purchases or sells or whatever out in a way that it moves the price less, which makes the trade more profitable for them. So one question is, for these hooks, is it that the person who wants to do this time weighted average transaction, are they saying, okay, for this liquidity pool, as I do my transaction, I'm choosing this hook? Or is it that there are certain liquidity pools where they say, we have this hook, so every time you use our pool, it will always time weight average your transaction? I'm not sure.
Speaker B: Yeah, that's a good question. Happy to unpack this a little bit. So the way that I put it is that, first off, when a pool is the person who determines the hooks for a pool, when a pool is deployed, the deployer of that pool gets to choose what hooks are set for that pool. The pools for a hook are determined at pool creation. And so liquidity providers choose to deposit liquidity to pools with specific hooks on them because they think that those hooks will are where they should provide liquidity for various reasons. Twam orders are orders that people would make externally when they. People would submit twam orders to pools that support twam, would that have a twam hook because they want that feature and functionality? Liquidity providers would provide liquidity to this pool because they actually get fees from tum orders that execute through it.
Speaker A: Yeah, but then one other question. So because you said, like, a liquidity provider can have multiple hooks on their liquidity pool, so is it that I might use the same pool, but I'm not doing a twam transaction, but I'm using a different hook that is also available on that liquidity pool? So, meaning like, because I guess what I'm trying to ask is, is everybody who's making a twam order, like, all doing it on the same pool, or is it that multiple different types of transactions are all happening on the same liquidity pool depending on how many different hooks they have?
Speaker B: T wams are like adding new order types to existing liquidity pools. Every single pool is uniswap v three. Every single pool has the built in logic and functionality of uniswap v three. I can provide liquidity. Other people can swap through it. You can create hooks that check if you're providing liquidity in some way and prevent you from doing it. You can add restrictions through hooks, but generally speaking, if you imagine a pool and then someone adds a twam hook and an oracle hook, it's still uniswap v three. You can still provide liquidity and swap like normal, but you also would have this option of submitting additional different transaction type to that same pool, which would be additional fees earned by liquidity providers on that pool. So like someone like I can make a regular swap on this pool. I can also do a on this pool. Liquidity providers provide liquidity to this pool because they earn fees on both swaps and on tam orders.
Speaker A: Okay, so basically hooks are optional for users?
Speaker B: Yeah, hooks are optional for users in a sense. You can have hooks that like constrain the logic of a pool. You can have a hook that says you can only provide liquidity to this pool if it's full range liquidity. And so you can prevent people from like you can add hooks that almost remove features to some degree. You could have hooks that add additional constraints to a pool, the same way you could add a hook that adds a new feature. But generally speaking, a hook that adds a new order type is an optional order type to use. It doesn't necessarily mean you can't use the other order type. And generally speaking, unless you have hooks that explicitly modify the functionality, it still is like the base system is still uniswap v three and concentrated liquidity.
Speaker A: Okay, so in a moment we're going to talk about more examples of hooks. But first, a quick word from the sponsors who make this show possible. We've said it once and we'll say it again. The system doesn't just need an update, it needs a complete rewrite. Web three offers that complete rewrite because it extends beyond just money staking nfts defi earn, Web three has become a world of its own. But who has time to juggle between five different crypto apps? Okex Wallet is one of the best apps for everything web three. It allows you to store, trade, earn and manage your crypto and your nfts across 60 plus blockchains all in one place. And now it's one of the only self custody wallets that doesn't require a seed phrase. There's just no other wallet that says powerful, yet so simple. Give it a try@okex.com. web three join over 10,000 attendees for this year's biggest crypto event at Token 2049 Singapore. On September 13 to 14th, Sandeep from Polygon, Eric Wahl, Chris Berniske and over 200 others will hit the stage, joining the industry's most influential for an unforgettable experience ahead of the Formula one Grand Prix race weekend, Singapore will transform into a crypto hub. For a week from September 11 to 17th with over 300 side events that will make for unparalleled networking opportunities. Builders and investors at the bleeding edge of innovation will drive an agenda that covers the ever evolving regulatory landscape, the convergence of crypto and AI, web three gaming nfts in the metaverse, defi scalability, interoperability, and many more. Visit token 2049.com for 65% off regular tickets with the code unchained link in the description. Join over 80 million people using Crypto.com comma one of the easiest places to buy, trade and spend over 250 cryptocurrencies with the crypto.com Visa card, you can spend your crypto anywhere and get rewarded at every step, up to 5% cashback instantly, plus 100% rebates for your Netflix and Spotify subscriptions and zero annual fees. New users enjoy zero credit card fees on crypto purchases in their first seven days. Download the crypto.com app and get Dollar 25 with the code Laura link in the description this episode is brought to you by Shopify. Forget the frustration of picking commerce platforms when you switch your business to Shopify, the global commerce platform that supercharges your selling wherever you sell. With Shopify, you'll harness the same intuitive features, trusted apps and powerful analytics used by the world's leading brands. Sign up today for your dollar one per month trial period@shopify.com. tech all lowercase, that's Shopify.com tech. Back to my conversation with Hayden. So we talked about this t Wham hook which you guys created. Are there any other examples that you feel will be either common and that you're either creating? And we also, I think, meant to address who it is that will be contributing the hooks and how they get adopted.
Speaker B: Yeah, I think that's all great, all great topics. I'd say that like one other maybe interesting hook example is just again, this is something that people have tried to do in other ways, in external ways, but you can definitely have at any given moment, a lot of the liquidity pool. A lot of the liquidity in a pool is not being used, it's just sitting idly. You can imagine hooks. This is another example of something that is very tough to do externally because people have tried to basically keep out of range liquidity in lending pools and then as the price starts to approach. So you could imagine an important property of uniswap is that it is solvent. That is an important property. You need a guarantee that liquidity that you are expected to be in the pool will be available when it's needed with externally built systems, you rely on people to frequently update their. If you have a system where some liquidity is elsewhere, but you need it for a given swap, you need to have. There's always, you need to have people that are managing systems that are pulling liquidity every ten minutes or something, and then if the price moves too fast, suddenly it's not available. The point being that with hooks, all liquidity that's not in the current narrow price range can be stored in other contracts doing other things. But then in real time, if a price moves the price outside of to a point where it needs additional liquidity, you could just pull the liquidity from those other systems in real time, basically on demand within a swap. So I think that's an interesting category people have talked about. It's very tough to create pools right now for things that look like the wrapped staked ETH or very tough to create pools for pools. I think interesting hook patterns will allow you to have pools that are earning yield in other places which are interesting. I do think that, like, experiments with fee designs are one of the most important ones and will probably be one of the most used ones. There are a whole bunch of other ones. I'd say that, like, things around, like internalizing mev for like, leaking less value, just leaking less value out of pools generally, and are pretty interesting.
Speaker A: But so I'm sure you've heard the chatter about all this, because I think so many people, when they heard this, the number one thought was, how do you keep this secure? And when I was writing my other book and I wrote about the Dao hack, something that I learned, and I don't know if this is still true, but the DAO hack occurred because of an interaction with an outside contract. And I believe that this is generally kind of a dangerous thing for any smart contract to have this external contract interact with it. So how do you prevent people from adding maliciously designed hooks that are, for instance, meant to be rug pulls? Or in general, how does the security of these hooks get vetted?
Speaker B: Yeah, I think that it's good to look to Ethereum again, in part for this answer, and I'll unpack it more. But, like, Ethereum isn't good because you can't create unsafe, smart contracts. Ethereum is good because you can create safe, smart contracts. And I'd say that, like, it is somewhat similar with hooks. Like the same way that, like today, people can create tokens that are unsafe, people create tokens that are safe. And the same way that even these problems right now, we talked a little bit about things that can be done internally can also be done externally. That's also the case for unsafe hooks can also be managed by creating unsafe tokens. I think that what's really important here is actually that hooks make it easier to experiment in amms in safe ways. And definitely how front ends interact with pools are a little bit different and how users interact with pools might be a little bit different. But generally speaking, the core thing here is that the good thing about hooks is you can create a safe hook and you can verify a hook is safe. And it is easier to create a safe hook than it is to create an entire from scratch safe ammo. I'd say that how we handle what hooks appear to users in our interface might be different even from what other people do with other interfaces. But I'd say that I would not. In our own products, we wouldn't want to expose random LP's to pools that have hooks that we don't know what they are and what they do.
Speaker A: So then is there some process for adding hooks that goes through some central gatekeeper to make sure it's all safe?
Speaker B: It's like things are process for deploying smart contracts. Not really, but there is a process for choosing what smart contracts we like. The same way that aggregators, they're trying to aggregate as many liquidity sources as they can, but they're only going to aggregate a liquidity source that they deem is safe for their users. And so there's no like anyone can create a hook to do anything. Some hooks might not need a front end. Some hooks might be involved in the niche operations of some specific protocol. We don't need to verify it because it's not meant for our users. It's meant for a different project and their own users, for us, for our liquidity provisioned interface. As hooks are developed and as people create liquidity and pour them into hooks, as hooks are, we're going to audit and verify and whatever hooks meet our security bar and have some level of usage, we're going to try to expose those to our users. But the cool thing is that anyone, it's completely permissionless to create a hook, but it's not advisable to tell your users to go into a unaudited hook. In fact, it's extremely inadvisable. You probably should never, if you're operating a front end or if you're building a front end, you should definitely not just expose every possible pool with every possible hook without any consideration.
Speaker A: Okay, so essentially every front end is deciding which hooks get exposed to their users? Is that what you're saying?
Speaker B: Yeah. For pools that even need front end, some pools don't even need front ends. But, yeah, generally speaking, it's kind of up to front ends to decide, the same way that it is up to front ends to decide what liquidity sources they integrate or what protocols they integrate. It's going from a dex to a dex. It's going from a decentralized exchange protocol to almost like a decentralized exchange platform. And so not every possible implementation will be safe. But I'd say that maybe, again, can reference that one. Something that came up on, again, I watched a two minute clip, but thought they were very interesting topics. But one of the things that came up was around this idea of maybe there being two types of those kind of default configurations and then scary everything else. I say that it's going to be a little bit more complicated than a little bit more of a spectrum than that. I say that there's probably a default configuration that looks almost identical to uniswap v three. You can do uniswap v three. Maybe the most popular configuration actually might be uniswap v three, but removes the oracle, which saves gas. Because one opinionated choice we made in uniswap v three and v two was adding this oracle. And the oracle adds a gas cost for every swapper to create this public good of a price, oracle that can be used in external systems, but some people might not want to pay that cost. And so maybe the most used hook will actually be zero hooks, and that alone will be better than v three because it's cheaper for certain people. But I think that there are also going to be a wide spectrum of, I think that there's going to be a lot of development, a lot of innovation across the ecosystem. And over time, hooks will be developed that modify the pools in ways that benefit people. And they'll be tested and they'll be audited and they'll be like, you know, and as more and more are created, they'll, you know, like, they'll start to, like, be more. More of them will start to be exposed to people. So it's not going to be like two worlds of like, like no hooks, default configuration, and like any hook. Oh, super scary. There's going to be like a whole middle ground of like, hooks that have started to like, gain. Some have been battle tested, hooks that have been like. It might be that there's ten hooks that are used. There might be a power law distribution, maybe a few hooks will be massive unlocks to the ecosystem, and a lot of pools will use them, and then there will be a long tail of hooks that are used only in a few pools or in niche situations or for specific user projects. And front ends, it's kind of like tokens. Tokens have a power law of usage, but there's a massive long tail, and it's not really like, oh, there's three good tokens and everything else. It's like danger territory. Don't touch it. It's like there's like a, you know, there's a spectrum.
Speaker A: Spectrum.
Speaker B: And we, you know, it's up to front ends and users to, like, you know, think about how they interface with things.
Speaker A: And so one. One question, because these hooks can be used across multiple liquidity pools, and we've seen in the history of crypto that there are many times when things that are audited end up having vulnerabilities in them. And so what if, you know, I don't know, like, 20% of all the liquidity pools have this one hook in it that ultimately, you know, you guys realize that there's some kind of bug, as far as I understand, like, once you deploy, it's out there, and I think it's the same for the hooks. So then what happens? Do you, like, quickly whip up another version of Uniswap that, like, doesn't allow this hook and then try to get people to migrate or, like, I don't even know how that affects things? Do those liquidity pools just decide we're going to abandon and deploy new ones, or. I don't know what you do in a situation like that. What are your thoughts?
Speaker B: You could start. You always could start with the base case, the security of a uniswap, it's what happens if there's a bug in you. Swap V three. Right now, all v three pools use the exact same logic, and it's been very well battle tested. People now feel pretty secure in it, I can tell you. While we tested it harder than anything we've ever tested before, like, at the launch time, it was still scary as the developer, because bug announced the other.
Speaker A: Day, I meant to look this up.
Speaker B: In V three. Yeah, in V three, I don't know. I mean, I know the thing is processed, like, one and a half trillion in volume. I don't think that there are any major bugs that can cause any.
Speaker A: Maybe not somebody said this, but yeah. Now I don't really see.
Speaker B: Maybe it's referring to a bug in V four, which is reasonable. There was a bug user bug report part of the build in public someone had found a bug in V four. I will mention that V four hasn't even been code frozen, let alone audited, and so the bugs are expected at this stage. Part of the idea of opening it up this early, I'm sure we would have eventually caught that bug and it wouldn't have made it through auditing, but it's actually much better and faster to have people out in the wild discover them and report them and fix them. So that's kind of relating to the building and public thing. I'd say that, generally speaking, the idea of a hook that is unsafe is very similar to an amm that is unsafe people can build. If people wanted to experiment with new functionality in Amms today, they would build a new amm from scratch. The surface area for doing that. Experimentation is much scarier. In that world, you don't just have to audit a hook and a limited constraint of things. You have to audit the entire system if you want to create some new amm functionality. If you want the base case of uniswap with no new functionality, then you can use no hooks if you want to add functionality. The surface area of what you can build with a hook is much more constrained, and it's much less likely to have a bug, and it's much less likely to have a security vulnerability. Definitely it's not impossible for a hook to be unsafe, but it's easier for a hook to be safe. What hooks are replacing is custom logic and amms or externally built things. Those things are just as likely to have vulnerabilities, if not significantly more likely. The things that hooks replace are either things that are built externally to pools that try to add on additional logic to it, or things or entire new amms. And both of those are much riskier than building a hook. So to me, it feels like a significant security upgrade for people that want new logic.
Speaker A: I totally get that. But can you just play out my scenario? If that did happen, what would you do?
Speaker B: If there was an unsafe hook, but.
Speaker A: If it was one that was popular, affected a huge percentage of the pools?
Speaker B: I think an unsafe hook is the same same as an unsafe amm implementation for the pools that use that hook. So definitely you wouldn't need to migrate liquidity to a new version of the protocol. You would need to withdraw liquidity from those hooks. And if you wanted the same functionality, deploy a new hook that fixes the bug. You could migrate to new pool. You don't need to exit v four, you just need to exit the pools within v four that have those hooks.
Speaker A: In that world and also cut off any way in which other pools might interact with those.
Speaker B: Yeah, I think that generally speaking, there's today in uniswap, there's external. Their accounting logic is partially just using separate smart contracts. And so each smart contract is keeping track of its own balances, and they don't interact with each other. There's definitely in v four, there are all liquidity pools exist in a single contract. And so I think that aspect does, I think for some people evoke, like, oh, is there some sort of contagion type of, of possibility across pools? But I'd say that, like, I don't know if maybe that wasn't what you were getting at, but I'd say that, like, that probability, I'd say it's still, like, if there's a bug in uniswap v three, it affects all pools. And so, like, you still have the same, like, a bug will affect everything. And so in V four, a bug would mean that, like, our accounting logic is broken, that prevents pools from, like, you know, certain interactions. Like, it's sort of like, it's like a similar class to bug. Like, to me, like a, you know, the ability for pools, documentation between them would be a similar class of bug to, like, V three. Having a bug that, like, you know, it's like, fundamentally broken, generally speaking. Like, first, like, there have been other projects that have done singleton style designs right. Balance of V two has been out for many years.
Speaker A: Before we, before you go into that, make sure describe Singleton. Like, yeah, and I totally forgot because, yes, in uniswap V three, you had a new contract for every pool. It was expensive. Now you're going this Singleton contract route. So describe what a singleton.
Speaker B: And yeah, Singleton is just that all pools live within a single, single smart contract. And that makes it much today when you do a trade that routes across many pools and has many interactions, the need for pools to communicate with each other, tokens to be transferred between pools directly, that adds a lot of gas cost. And the cost of deploying a pool involves creating an entirely new smart contract. With Singleton, the cost of deploying a new pool is just updating a little number within a smart contract. And so the gas cost of deploying pools goes down 99%, which is pretty nice, approximately. Code isn't frozen, so you can't really promise gas benchmarks. And then the cost of trades that route across many pools, all internal transfers between pools. You don't have to really pay nearly as much gas cost for them because it's like updating internal balances instead of transferring them between smart contracts. And so ultimately, the purpose of this is to create much greater gas efficiency when routing between multiple pools and to significantly lower the gas cost of deploying pools as well. And.
Speaker A: Okay, so, yeah, because you're right, when I framed my question to you about if there's a malicious hook, I was thinking about the different pools as being different smart contracts. But you're right. Thank you for reminding me of Singleton. So then that makes it feel even more alarming to me. But why are you seemingly not very alarmed?
Speaker B: Yeah, I mean, I think that this is one of the reasons why we, like, really benefit from being in this ecosystem where a lot of development is happening. And like, and like, we've got, we've, you know, even like seeing that, like, bouncer did it and like, it has worked for a long time for them has given additional confidence. But I say that, like, generally speaking, like, you know, these, these smart contracts, like, they're, they're open source today. Like they're, they need to be very well tested and they need to be, you know, very well audited. And we've seen, you know, other projects have done similar designs. I mean, like, generally speaking, we need to, like. Yeah, like, you need to like, test it like a spaceship, right? Like, it's not. But at the same time, like, that was already the case. Like, you could have separate pools and you'd still need to, like, if like, v three was like, also terrifying in its own way because it was like a complex smart contract code base. And the probability of there being a bug in singleton is not significantly higher than the probability of there having been a bug in v three. I'd say that the process, one of the reasons I'm really excited about this slower build in public rollout process is it gives a lot more time for a lot more eyes on the code before it goes out. So it's an additional layer of security from that.
Speaker A: Go into detail on that. You just made an announcement about v four, but you didn't actually deploy it, which is what you did previously when you had a new version. You've now publicized the code. What are the steps before you actually deploy?
Speaker B: Yeah, I'd say the steps right now, there's no specific timeline. The steps right now is like, we put out a vision for what we think uniswap V four should be. If we were to follow a v three style path and we hadn't put it out, like, what we do from now is we probably spend like several months cleaning up the code base and improving it and optimizing it. What's happening now is that it's public. There's like a time for people to read and digest the code base would be integrators, would be hook builders, people who have experience with AMM design. People have an opportunity to look at the code base, think about our vision for it, give, you know, we have contribution guidelines in the GitHub repo. People can open issues and with things that they think are good about should be changed or bad about it. If there are open issues that they can write the code themselves and create pull requests and propose modifications to the code base, they can look for bugs, they can fix documentation. All of this has already started to happen. People have already started finding bugs, finding optimizations, opening issues. It's massively accelerated. How fast certain things have been, we would have eventually, probably, but it would have been a much longer process. And I'd say there are a few things that might factor into when this thing actually launches. I'd say that one thing that probably factors in is definitely, you need several months of it being public, I think, to really adequately have time for people to give their input, discover optimizations, discover bugs. Obviously there'll be a. So that's part of it. There is a kind of interesting aspect where this singleton system we created is combined with this other thing that I don't need to really get into called flash accounting, which is really just how we do the logic for the accounting logic in a way that is more optimal for routing across many pools, and the optimal form of the way that we handle Singleton, in the accounting logic of keeping all pools solvent and efficiently routing across them, is made significantly more optimal by an upcoming Ethereum upgrade, EIP 1153. And it was, you know, it's slated for include, for inclusion for the Cancun hard fork. It's a, you know, very, like, it's not only useful for us, it's useful for many other projects in the space. It's a very cool upgrade that just makes it cheaper to up, you know, to temporarily store things within smart contracts. Right. Transient storage, it's just about, it's like a temporary form of storage, meaning that it's similar to a flash loan where you can borrow something as long as you pay it back off the end of the transaction. Transient storage is just, you can use storage as long as you delete it by the end of the transaction. In the world where you do that, the cost to Ethereum for temporary storage is much lower. The cost on an Ethereum node for temporary storage is much lower than the cost for permanent storage. Kind of intuitively maybe makes sense because that's one thing that the nodes all have to update and store something new forever. And the other one nodes don't need to actually update it, they just need to verify the logic. That upgrade makes Uniswap v four significantly more efficient. And in my opinion, it probably should not be deployed until after transient storage goes live on Ethereum. And then there are some modifications that would need to happen to the smart contract at that point to integrate with transient storage.
Speaker A: If you were to give a ballpark estimate of when you might actually deploy, what would you say? Now?
Speaker B: I say that essentially what you need is you need to, there's several months of community input and feedback. Then there's probably, as the code starts to authify, hopefully it's probably in the world where the community goes with post transient storage, which I think is very likely because it's just much more optimal. Probably it would be a few months after Cancun hard fork at the earliest, because you need time to integrate with with transient storage, and then after that freeze the code and then go through an auditing process. And so you don't really want to audit the code too much until the code is frozen. You don't really want to freeze the code until you've made any modifications if the transient storage. So I'd say that if the Cancun hard fork happened in September, and I don't know if it will, but it might, then maybe it could go live in November, December, something like that. That could be a timeline. But I don't know, it's not really fully up to me. It's like there's going to be a social, there's been a lot of conversation on social consensus. I think there'll be a little bit of social kind of convergence on what makes sense to do here.
Speaker A: All right, so I'm sure you've also seen, in addition to the chatter about potential security issues with Uniswap V four, that people also are talking about the new business license, which this appears to have happened after the Sushiswap incident, when famously a copy of the code and did a fork and did this vampire attack on Uniswap, as we discussed. And I wondered after that you went to this two year license where people could not use the code for two years. They could see it but not use it. And with this version you've extended that to four years. Why did you decide to go with a business license of that length?
Speaker B: Yeah, it's a great question. And I think that there's also been kind of general chatter around, like, what is open source? What is source available? And I think that there's definitely definition, and I think that definitely Busl is different from GPL and MIT. And I think that people say that's source available, not open source, is totally fair. And I don't think that there was any intention to muddy the language there on our part.
Speaker A: Okay. Yeah. People took issue with the tweet that says we've open sourced v four.
Speaker B: I think that open sourced is a verb. Source available isn't. But we've made sources. Again, it's fair. I think it's fair. There wasn't an intention in that. I do think that Busl, for what it's worth, is a little bit categorically different from other types of proprietary licenses in a pretty meaningful way. And I think there's a reason that it has had significant, definitely, like, we were one of the first projects to use it, but many other projects use it now today. And I do think it's like categorically different than a fully proprietary license. And what I mean by that is the way BusL works is that after some amount of years, it sort of is forced to go GPL. It's guaranteed to be GPL, and it can only be accelerated, it can't be extended.
Speaker A: And GPL is when projects can use.
Speaker B: Your code, GPL is copy left, which GPL means that, yes, anyone can fork it, but they also have to go open source. It's sort of a, there's like two types of open source. It's like, you know, like, GPL is kind of like the viral form of open source where like anyone can integrate it, but they also have to become open source.
Speaker A: Is that also the term copy left, GPL and copy left. Okay.
Speaker B: And then MIT, like anyone can use in any way and they don't need to open source. So for an MIT code base, someone can integrate it into their project and have that project be closed source. So it's not viral. In the same way, I'd say that what's interesting about BuSl is that it's guaranteed to eventually be open source after four years, at four years or earlier before will be GPL. There's a time window for which it is proprietary and it's fixed at start and it can only be accelerated. Both Uniswap labs and Uniswap governance can independently grant additional licenses, and governance can actually shorten the period of time for which it is open source until it is. Until it goes, until it shortens the BSL time and makes it full GPL. I will say that a lot of the early, I think open source. First off, we're massive open source fans here. Almost everything we do, our wallethead, fully open source, which is more than most wallets, for what it's worth. Our web app, fully open source Uniswap v. Three, which was BSL two years ago, is now GPL and fully open source Uniswap v. One, V two. The things that we've built have been forked thousands of times. We've benefited from those forks, we've benefited from the innovation that's happened on those forks. I think we're really big fans of it. I do think that some of the early open source philosophy didn't necessarily factor in this world of crypto, where you have, within days, economically incentivized, thousands of economically incentivized forks. There was a period of time where there was probably 20 Uniswap v. Two forks per day, and they were all creating incentives and they were all somewhat low quality as well. I think that the idea of BSL is a little bit one. I think that, first off, it's in part an acknowledgment that maybe it's not just labs that should make this decision. Uni holders actually do have. There's an ENS subdomain that is like Uniswap dash license, Uniswap eth that governance controls directly. And if they want to, like modify, like, if they want to make it gpl, there could be a vote today. So part of it is like going beyond labs. Other stakeholders can have a say in this decision, which is interesting and kind of innovation in licensing on its own.
Speaker A: Right, and I'm sorry, you said that token holders can do that.
Speaker B: Yeah. There's a. Uniswap governance directly controls an ENS name, Uniswap etH, and there are subdomains to that ENs name that can be updated by governance votes. And the official license of Uniswap v four, if you read the text, says the change date, the change date is when it goes from BSL to GPL, is four years from now, or sooner at any date specified by the text in this Ens file. And so governance can actually directly vote to shorten that if it wants to. So part of it is like, maybe this isn't even just our code base, maybe this is like a community's code base. And they can decide if they want it to be forkable sooner.
Speaker A: But how did you come up with four years after you already did the two years? Because the two years was kind of controversial, but now you've doubled it, so why.
Speaker B: Yeah, I think that, like, I think that, you know, the two years look partially. I think that the two years, like, there were probably, like, voices. But like, I say that, like, first off, the license kind of, like, worked pretty well in a sense, where, like, it prevented a bunch, like, a lot of low quality forks from happening super early on. I am interested to see how people build on top of v three at this point. But at the same time, I think that, like, I don't know, I kind of think that decision should also be up to, like, the broader community and ecosystem. And I think that, like, they were definitely concerned with the community around, like, maybe this should have gone on for a little bit longer. And I think one thing that was really interesting is that we actually, one of the reasons we chose two years is that we thought anyone could rebuild this in two years. Turns out no one could. And so I think that three years is interesting as well, or four years is interesting as well. I think it's partially just like a decision you can't reverse. So I'd say that it can always be shortened through a governance vote from four to three to two to one, but you can never extend it. And so the thought was that, like, it was kind of successful for the uniswap community, the Busl license. And I think it's a big reason why a lot of other projects have adopted it.
Speaker A: Did that issue with the wormhole thing on deploying to BNB? I don't remember how, what the whole thing was. It was like, you guys wanted to deploy there, and then there was this issue about the bridge and blah, blah, blah. And then it was like getting close to the deadline of the two years. And then you were worried that somebody else would deploy uniswap on BNB. Did all that play a role in trying to extend it beyond two years?
Speaker B: No, I actually barely follow. I thought I barely actually followed that one. Funny. I'd say that there definitely were. I'm trying to remember this situation. I think that definitely there were governance votes on the BNB chain deploy in part because the license was going to expire and there was some desire within the community. I said, maybe when you say you, I'd say that. I actually wasn't like. But yeah, there were, like, proposals, governance proposals that were voted on. And there was like, a timing consideration mentioned in those proposals. But no, I don't think that that was like, the sole influence. I think it's more just about like, maybe just in everything in v four design, we kind of favored some level of, like, flexibility and optionality. And like, the sort of period of USL is like, irreversible in one direction and not irreversible in the other direction. And so, you know, if. If the community really, like, does not if. And again, they're sort of like different communities. Right. But, like, if the uniswap community doesn't like the four year license, there can be a vote to shorten it. It can never be a vote to extend it.
Speaker A: So that's mostly for pr reasons. It's not like they literally couldn't extend it. It's just that.
Speaker B: No, no, they legally can. There's no.
Speaker A: Oh, really?
Speaker B: License. Like, the license is no reverse. Like, it legally cannot be reversed in four years. No matter what the vote, no matter what the community votes on, it can never. It is guaranteed to be GPL. And that's why I think what I say when I say busl is categorically different than GPL is that it's like, not then GPL. Obviously it is, but then a different proprietary license because it's forced to go GPL. There's nothing I can do, or anyone can do to make this code proprietary beyond four years from now.
Speaker A: Okay, I see. I also want to address another. The thing that people have been discussing. There was some chatter that uniswap kind of borrowed some features from croc swap. Initially, people were using stronger words like plagiarize. But once I dug into the details, it's more like maybe was inspired by perhaps the more exact phrasing. But I just wanted to give you an opportunity to address any of those criticisms or just clear up what happened.
Speaker B: Yeah, I'd say that, like, generally speaking, definitely there was no, no plagiarism. In fact, a different protocol recently accused us of plagiarism, and then because they thought that the code was written, because they, like, looked at a commit that showed it eleven days ago. But if you actually look at the real commit history that extends from before it was open sourced. Our implementation happened a year before their implementation. This was not coxswap thing, but there was another thread that came out, but definitely no plagiarism. I'd say that, generally speaking, like, there's this funny conversation that happens, which is like, who invented Uniswap? That's a really good question. Right. Because some people say I invented Uniswap. Some people say Bancorp, the Bancorp team says the Bancorp team invented Uniswap. Some people say Vitalik invented Uniswap. Some people say, you know, some people say that Alan Liu, from gnosis, he wrote a blog post that inspired some of Uniswap work. And some people say Alan Liu invented Uniswap. Another interesting question that people say invented Uniswap. This would be like, I believe Tarun Tarun answer would be like this math economics professor in the 1970s invented Uniswap. And the reality is that everything is built on top of everything, and everything is, and it's two different ways. Sometimes you look to inspiration, and I say that even seeing how Balancer handled Balancer v two in the singleton did, like, make us feel a little bit better about Singleton as a design pattern, and it wasn't. The way we implemented is actually very different from the way they implement it. For what it's worth, we have a pretty different approach to it. There's a lot of protocols out there. There's been many protocols. I've heard of Crocswap, but there have been many protocols that have claimed uniswap plagiarized them. That I haven't even heard of before until I've seen the tweets claiming plagiarism. So I say that, generally speaking, good ideas, some things are kind of convergent. If something is a good pattern, multiple people sometimes converge on it as an idea at the same time. Additionally, sometimes you do hear things, and they make their way into the common sphere, and you think about them, and they influence what you're doing. I think good protocols do take the best patterns that they see around them. For sure. It's not plagiarism to learn from the industry you're operating in. Plagiarism is directly copying code. I'd say that, generally speaking, we exist in this world. There's a lot of innovation that's happening around uniswap. There's a lot of interesting design patterns. We're learning from them. We're also having our own ideas, and we're converging on what we think is the optimal amm design. I don't know the specific features. I don't even know if crocs off is open source yet. I don't know the specific features of that protocol.
Speaker A: Yeah, yeah. It was something like whatever. They had used some technique for one problem, and then you guys had borrowed the technique to a different problem. It wasn't like apples to apples or anything like that. And I think that two people are friendly, but, you know, again, it's like, I think they had one of those licenses, whatever it was, that. Yeah, the copy left one where if you use it, then you should be also copy left. Again. You guys didn't copy it. Exactly. So that doesn't apply, really. But anyway, I just saw so many people talking about it, I figured we should just address it.
Speaker B: Yeah, there was another one where there was like, that came up, like, also this. Again, a lot of people want to be like, oh, yeah, we. But there was like, one that came up where like, there was an MIT version and a GPL version of a library, and we linked to the GPL version even though there was an MIT version and the MIT version we could have until we accidentally linked to the wrong version. So there's things like that that come up. We always appreciate these types of things. But at the same time, also, v four is built on ideas that we've been trying to build for five years. It's not. And we've tried to learn from the best smart contract patterns in the industry, but there's no specific accusation I've seen. Feels like it's had any real weight.
Speaker A: Yeah. So Sam Kamecian of fracs tweeted, underappreciated benefit of all pool tokens living in a single contract. In uni v four, every stablecoins blacklist function is effectively dead. And I saw that in the replies. Columbia business school professor Austin Campbell said that this poses the risk that the US could put a freeze order on uniswap v four or blacklisted. I don't know. Have you looked into that risk and is this something you're trying to mitigate for?
Speaker B: I don't think that. I think that things like this USDC is a token that has a blacklist function. They could already be blacklist any uniswap pool. This idea is definitely that maybe to blacklist one, you have to blacklist all of them. But I think that the way that USDC blacklists has been used historically has been always to, like, you know, targeted at individuals, not at, like, entire, you know, protocols. Right. Like, technically, like, you know, it could, like, also, like, mess with, like, you know, makerdao or Aave. And I don't think that this is like, you know, they're like, this sort of idea of, like, I don't know. I don't. To me, it doesn't feel like there's any, like, categorical difference here from, like, what's already been out there. In the world. Like, there is some, like, oh, it's like, harder to be, like, more targeted at specific uniswap pools or something like that. But you could still, like, freeze, like, USDC for any, like, user who would want to withdraw from their uniswap. Like, and again, it's not. I don't know. I think it's like. It's like a funny observation, I guess, in a sense, but it's not like a. In my mind, it doesn't really change the, like, fundamental dynamics of what is possible and isn't possible with the USDC blacklist. I think it's, like, about the same him in some capacity. I don't know.
Speaker A: Okay, so now I have a question, and you, I'm sure, are very well aware that us regulators are looking at ways to regulate defi. And one of the suggestions that we saw potentially making its way through Congress last fall was the notion that the front ends would be regulated. And when I was, you know, learning about kind of these hook contracts and everything, I couldn't help but think, oh, could a hook be used to implement KYC AML? And maybe that might require us to have blockchain based identity. So it could be super far in the future. But I just thought, oh, is that something that hooks could be used for?
Speaker B: Is it possible to create. I mean, it's trivially possible to create pools, for what it's worth. It's already trivially possible to create pools that require Kyc. You can create a token, and the transfer function requires Kyc, and then people will only be able to swap with that token if they are Kyc. So, like, that's already.
Speaker A: Yeah, because there's already Kyc. Defi. Yeah, okay, right.
Speaker B: And so, like, yes. You could instead do it within a pool instead of within a token. I don't think there's, like, again, like, I don't think there's, like, a categorical difference in terms of what is possible. I think that maybe, like, is it more gas efficient? Maybe it is. I don't know. But it doesn't. Like, that. Doesn't to me, seem like a. Like a. A meaningful, like, difference in capabilities in terms of, like, what, you know, how regulation plays out. That's obviously very, you know, that's. That's like a separate thing. And I think that, like, there's no, like, I don't think that there's, like, a direct, suddenly uniswap v four. Like, it's, like, categorically different in how it interfaces with something like that. I'd say that, like, you know, yes, it is possible to create hooks that do that, but I don't think that, like, it's, it's also possible to create pools. In fact, people have already created pools that do that historically. People have created tokens with whitelists that, you know, and created pools on uniswap with them. And, like, those have existed for, actually, there were ones that existed back in the V one days that did that.
Speaker A: Oh, interesting.
Speaker B: There was that project realty. It was like real estate. They were tokenizing, like, houses, and they created a whitelist, and you could only, you know, I don't think we like, anyway, long story short, there was like a, there have been projects that have been playing with this concept since, like the beginning of time or since the beginning, like, for a long time. But, like, I don't think V four is different on that front. It's like, always been possible. It's, it's never been, like, hard coded into the protocol as a requirement. I think it's like a DC. It's like, you know, I get, I see uniswap, like, I see ethereum, like, I see the Internet. It's like a decentralized piece of infrastructure that, you know, that you can, that can, that can, you can do a lot of things with, and you can definitely, like, it's, you can, you can both break the law on the Internet and comply with the law on the Internet. The Internet is the Internet. And I'd say that, like, you know, when you're building a product on top of a decentralized protocol, like, you should def, we obviously always, like, you know, like, there are a lot of things that we do in our front end to make sure that we're compliant with, like, the laws that, that in the jurisdictions in which we operate, we have lawyers, we do things to protect our users, et cetera. And so I'd say that maybe the only thing that I'll touch on with laws making their way through is, generally speaking, what is a little bit sad and unfortunate is that the US's approach to regulating crypto has not been very thoughtful or very good. And it feels like the US is way behind other countries in terms of how they think about crypto and how they're approaching regulating it. We're starting to see european countries, France, the UK, start to try to understand defi and study it and be thoughtful around how they interact with it and what to do with it. And then you have the US where it feels like it's mostly political grandstanding, fortunately.
Speaker A: And are you thinking about moving anywhere because you live in the US.
Speaker B: I mean, I'd say that, like, generally speaking, like, I, first of all, I mean, I love living in the Us. I don't want to move. I'd say that, like, we do always consider, like, oh, like, should we ever open up an office somewhere else? But I'd say that, like, generally speaking, you know, uniswap has users all around the world, right? The US isn't the only country that exists, as much as sometimes people pretend it is. And so, like, 70% of our users are outside the US. I don't know. I like where I live. Don't intend to. I also do my best to. I don't feel like, oh, I'm in legal danger living in the US because I am very thoughtful about the legal risks I take on. And people get very mad at me sometimes when our company makes decisions based on managing our legal risk, but sometimes you got to do it.
Speaker A: So we've alluded to this throughout, but it does seem that the way this is going, other projects that might have thought of building their own automated market makers might instead now just build on uniswap. And because of all the customization and everything, it sort of feels like it could become kind of like the Amazon of this type of activity, this sort of everything store for anything, swap space. So I was wondering if you thought that would affect the core principle of decentralization that crypto is built on.
Speaker B: Look, I think that. I don't really. I don't think so. I think that, look, anyone can always compete with it. Anyone can always build an alternative amm system. I'd say that the ability to customize more with it, I'd say that if people are using Uniswap because it is better than alternatives, it's not really automatically. Essentially, the important thing is that you can compete with it. I'd also say that there's a difference between the types of powers. The cool thing about unswappy four is it's still an immutable, smart contract, even though it might gain momentum and traction and network effects. That doesn't give me Hayden Adams as the person who created the company that did a lot of the initial development of it. I still don't have the ability to steal everyone who uses it funds. Right? Like, I still don't have the ability to, like, prevent someone from, like, I don't have the ability to prevent someone from using Uniswap v. Four. Like, someone can build a project on top of uniswap v four. And I, you know, and, yeah, you know, too soon, I guess. But other, like, the sort of, like, fundamental, like, what matters? Like, the fundamental properties, right? Like Ethereum gaining market share relative to other l one s doesn't, like, centralize the industry necessarily. I'd say that, like, it's, in some ways, the bigger theorem grows, the more decentralized it is. And so I don't think that in a world where I had a secret backdoor to uniswap, maybe that would be really bad. I think that generally not. Maybe that would obviously be very bad, and that would be a very centralizing force. But I'd say that the protocol in this decentralized state that it reaches and the way that the smart contracts are immutable and all of that, I think, is, like, if it continues to gain in market share and growth, like, it doesn't automatically mean greater centralization because there's no, like, single person who has inherent control over the system. And so, you know.
Speaker A: Yeah, yeah, that's such a good point. I just realized you're right. Like, it just creates, like, almost like, God, I'm not a biology person, so hopefully an environmental person listening to this won't get mad at me. But, like, I think of, like, certain ecosystems are, like, you go into a forest where there's moss everywhere, and you just imagine there's all kinds of activity happening on that. So it kind of creates some sort of habitat for all different types of developers and whatever to build on. All right, well, Hayden, this has been such a fascinating discussion. Thank you so much. Where can people learn more about you and your work?
Speaker B: Yeah, people can learn about me and my work, I guess. I'm often on Twitter. Uniswap. On Twitter at uniswap. Uniswap.org dot. You can read about the protocol, contribute to it on the uniswap GitHub. You can download our mobile wallet if you like. Mobile wallets. Uniswap wallet launched recently, but yeah. Learning about our work. Just listen to this podcast episode you already finished, I guess. Listen to other podcasts I've done recently. Read our blog. I don't know. Yeah.
Speaker A: All right. It's been a pleasure having you on unchained.
Speaker B: Yeah, it's been great being here. Probably shouldn't wait five years until the next time.
Speaker A: Yes. We'll have you back sooner.
Speaker B: Yeah, it's my fault, not yours, I think.
Speaker A: All right. Thanks so much for joining us today to learn more about Hayden and Uniswap V four, check out the show notes for this episode Unchained is produced by me, Laura Shinna, with help from Kevin Fuchs, Matt Pilchard, Zach Seward, Juana Ranovich, Sam Sriram, Ginny Hogan, Jeff Benson, Leandra Camino, Kima Jamdar Shashank, and Margaret Courier. Thanks for listening.
