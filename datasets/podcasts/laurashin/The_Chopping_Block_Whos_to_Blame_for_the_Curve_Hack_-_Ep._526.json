[
    {
        "speaker": "A",
        "text": "Hey unchained listeners. As you know, its hard keeping up with the fast paced world of crypto, so weve got just the thing for you. Subscribe to our free unchained daily newsletter at unchainedcrypto dot substack.com. youll get the latest crypto news in original articles from our reporters, as well as summaries of other happenings in bullet points. Plus our meme of the day, all curated and written by our amazing team. Its still your no hype resource for all things crypto, just in newsletter form. Sign up at unchainedcrypto dot substack.com dot. Again, the URL is unchainedcrypto dot substack.com dot."
    },
    {
        "speaker": "B",
        "text": "Not a dividend, it's a tale of Tuqwan."
    },
    {
        "speaker": "C",
        "text": "Now your losses are on someone else's balance sheet."
    },
    {
        "speaker": "D",
        "text": "Generally speaking, airdrops are kind of pointless anyways."
    },
    {
        "speaker": "C",
        "text": "I named trading firms who are very involved."
    },
    {
        "speaker": "B",
        "text": "Alec Eth is the ultimate defi protocols."
    },
    {
        "speaker": "C",
        "text": "Are the antidote to this problem. Hello everybody. Welcome to the chopping block. Every couple of weeks, the four of us get together and give the industry insider's perspective on the crypto topics of the day. So quick intros. First, we've got Tom, the Defi maven and master of memes. Next, we've got tarun the Giga brain and grand Poobah at Gauntlet. Then today, special guest, we've got Lawrence, the smart contract cyber sleuth. And then you got myself. I'm Haseeb, the head hype man at Dragonfly. So we are early stage investors in crypto, but I want to caveat that nothing we say here is investment advice, legal advice, or even life advice. Please see choppingblock XYZ for more disclosures. Lawrence, welcome to the show. We have you here somewhat inauspicious circumstances because there's been a lot of mayhem going on in DeFi, and we thought you were just the guy to help us decipher everything that's going on."
    },
    {
        "speaker": "E",
        "text": "I'm not sure there's been a day in this quarter that would qualify as an auspicious day to appear on a podcast and preferred, to be honest with you."
    },
    {
        "speaker": "C",
        "text": "There was one day. There was one day when Ripple went up a lot that I thought was an auspicious day. The rest of them have been pretty crappy, actually."
    },
    {
        "speaker": "B",
        "text": "I think for the audience who might not know, Lawrence himself has dealt with creating a protocol that has had an attack. And so maybe a bit of history on your experience would be good for the listeners edification."
    },
    {
        "speaker": "E",
        "text": "Yeah, I'm happy to talk about that. So, in 2001, I worked as a contributor to a protocol called Indexed Finance. The idea was there was that you could model index funds using balancer LP's or fork of balancer LP's. They were attacked in October of 2021 using a. It was a flashlight attack combined with some overflowing of some sushi tokens into a particular pool. Honestly, it's been a year and a half now, and the details are starting to slip from me, but all this is out. I know what it's like to be on the other side of that and to kind of pick through things as they happen. I wouldn't wish it on anyone."
    },
    {
        "speaker": "D",
        "text": "And now you've been, I think, giving talks about sort of the state of the art when it comes to white hatting. And you're also working on your own new project now, correct?"
    },
    {
        "speaker": "E",
        "text": "Yes. It turns out my bit last year, ECC was a rough overview of the attacks that had happened. I think we'd had, like, over 50 attacks that appeared like, last year was a particularly bad one for Defi hacks and bridges in particular. And this one seems to be a lot more muted. And it had been commented on Twitter that it seemed that the pace had slowed down a bit. So people are starting to look in slightly more esoteric places, which we will get to over the course of this chat. But, yeah, I never thought that my bit would be the attack becomes the commentator, but here we are."
    },
    {
        "speaker": "C",
        "text": "Well, look, I think it's a line of work that you're going to be able to make some good money in this industry for quite a while, as long as these smart contracts keep getting hacked. So let's maybe jump into it, because I think, actually, there's a lot of different angles to the story, and it's one that touches on different stories that we've explored through previous episodes of the chopping block. So, for those of you who are not aware, one of the largest on chain protocols in DeFi is called curve. So it's an amm, it's an automated market maker that basically allows you to trade assets that are tightly pegged against each other, most commonly trading stable coins. So what happened over the weekend was that there was a hack of curve, and this hack particularly targeted these very old pools that were all deployed, I think, a couple of years ago. One of them was Jpegged Peth, metronome SE, and Alchemyx's al Ethan. So these three pools in particular, in total, it was on the order of about $40 million in total. That were hacked. These were all third party pools. So curve allows you to have third parties deploy certain pools of their own configuration. Then there are the core pools of the three pool and whatnot. That those were not affected by this. And particularly the reason why these pools were affected is that they all used an old version of VYPR. VYPR, for those of you who are not aware, Viper is a smart contract language that's written to be a competitor to solidity, that has more python like syntax, which is a little bit different than solidity, which is more JavaScript esque type language. And so this older version, now newer versions, actually, all of Curve is actually written in VYPR. But newer versions of Viper do not have this bug. It was fixed, I believe, in 2011 or something. So the rest of curve is not vulnerable to this bug. But these older versions were. So this bug freaked people out, because Curve is one of the most well known, longest standing stalwart protocols in DeFi, and is actually one of the largest protocols in DeFi by TVL. At the time of the bug, it had about $3 billion in total assets in curve, and in large part as a result of the panic that set in after people realized this bug took place, half of all the capital in curve has pulled out. Curve is now down almost 50% of all of the assets in curve, meaning $1.5 billion was withdrawn from curve over the last call it 48 ish hours. Let me pause there, because I think for a lot of folks, they may not understand the contours of what it means to say that there was a bug in a smart contract language or in a compiler. A lot of people have been pointing fingers and saying, oh my God, how did curve mess this up? Why are these people asleep at the wheel? Because this bug was a reentrancy. Bug. Reentrancy has a very long history in crypto as being famously the bug that took down the dao. It's a bug that keeps rearing its head over and over again. So, Lawrence, could you explain for us one, help us understand how viper and this bug fits into it and what people mean by reentrancy? Can you just walk through that for us?"
    },
    {
        "speaker": "E",
        "text": "Lawrence, I think there's probably going to be better resources than me to talk about the nature of what reentrancy is, but basically reentering a function more than once in the same call. I think this one's particularly interesting, because, as you say yourself, right, when people talk about reentrancy being a root cause for hacks, it's very common, right. It stretches back five years, six years, and this is, for the most part, if you're dealing with topics that modern approaches for things, it's a solved problem in this particular instance. So, as you mentioned, curve is written in viper. And there are three particular versions of the Viper release, I think, 215, 216, and three which had an issue in the way that one of the most common ways of preventing reentrancy is to just have a modifier that's just reentrancy lock that just says, I'm executing a bunch of code. There is no more reentrancy allowed here. You can't reenter into things for the most part. If you rely on that, then it's an assumption that you make, and you're fine. You go in, you execute code, and then you're out. The way that they looked on a much lower level for viper here in these three particular versions, is that the storage slots, the part in the smart contract that looks at whether or not you're in a lock or not, was reading and writing for reading from the wrong place. So it would say, here's where I'm, like, storing my status, and then I'm reading somewhere else to look and go, this is, am I in a lock or not? And your answer would always be no, because you're not looking at the place that says temporarily. Yes. This was fixed in Viper 3.1, which was released, I think, December 2021. So this is a zero day that's lived and died two years ago. It's ancient history in crypto terms. The part about it that some people are starting to point some fingers about, I think wrongly, in my opinion, is that when it was fixed, the way that it was dealt with was fixed allocation of unused story slots in the releases. It didn't have a flashing highlight that said, there's a bug here. There's something that needs to be dealt with and reach out to people. And you can kind of do that for curve because it's a smaller alternative language for the EVM. If it was something in solidity, for example, you would have a much harder time because you have to reach out to everyone. For Viper, you've got curve and you've got yearn, and there's a couple of forks. Of course, if you're just reading the release notes and you see there's no urgent flag, then you go, okay, well, it's fine. I don't need to upgrade. And for the most part, if you're writing smart contracts and deploying them, you don't necessarily want to push to redeploy things or upgrade them to the most recent language version of your compiler anyway because they're bleeding edge. There might be things that haven't been discovered yet. There's a couple of strange qualitative questions that come around when things like this happen. I think this is the first time that we've seen a wave of bugs all around the same kind of topic based on a trust assumption. And whilst we all say trust, don't verify here in crypto, when you are looking at things that are lower down the stack than the language you're programming in, when you're looking a layer beneath at the thing that translates things to evm you assume, and I think assume is a bad word here. But we do that everyone working closer to the bytecode knows what they're doing and we're human. I worked as a compilation engineer, I know how this goes. There's some interesting questions that are coming around right now about okay, so who was responsible? Is anyone? Is everyone? How do you resolve this going forwards? Does this mean there should be more financial incentive to look at a lower stack layer 0.5 if you were to consider the compiler to be that level? If so, who's paying that? VC's don't necessarily see a return on that, even though it falls under their stack. Developers perhaps, but developers will often be the ones taking external funding. It's a really fascinating conversation that I think has only just started and I think we'll see this roll over the next month, six weeks or so."
    },
    {
        "speaker": "B",
        "text": "A curious comparison is if we look at the most successful commercial compiler in history, it's by far Nvidia's compiler at this point in terms of dollars managed or dollars that are using it. And it's kind of interesting that people had tried to make open source compilers, including Intel, ATI, AMD, et cetera for graphics processors for a long time, and it somehow got beat by the proprietary one. I think an interesting question is what's the equivalent here? It won't necessarily be that it will be a proprietary compiler, but there'll be someone who has some sort of like market, let's not say monopoly. It's probably more like a monopsony, where they have some sort of indirect network effect that ensures that they get most of order flow of some form. And the monopsony is sort of intent, kind of incentivized to fund this type of stuff. I don't think that, to be honest, like the Ethereum foundation or people who are doing consensus stuff care that much about this? It's sort of like, well, we gave you solid d. You want to make another language go fuck off. Right. Which is like, not. It's. Unfortunately, for better or worse, that is Vitalik."
    },
    {
        "speaker": "C",
        "text": "Wasn't Vitalik involved in the development of."
    },
    {
        "speaker": "B",
        "text": "Viper in the beginning? Sure, sure. Everyone wants other languages, if I recall. Everyone wants other languages. No one wants to maintain other languages. That's where the spike comes. The key thing is that all of the funding, if you look at the funding from the base protocol, most of it is like, Viper's got a couple little grants, but it's mainly going to solidity, development, verification. What was the e two deposit contract written in? Right. The initial version. The test was invited. But my point is, there is this concentration effect, and this is one of these things where I know there's a very heated battle amongst protocol engineers, but there's a battle over whether it's a good idea to have many clients for a particular blockchain, or whether you should just have one. Because if you have many clients and there's an error that all of them have, that is something that's outside of the specifications of the client. Well, it's possible that they each implemented the error slightly differently, and then you get these kind of like production bugs that look way crazier than if everyone was running the same client. And we actually have seen a couple of those in the Etube Beacon chain, but I guess there's always going to be this kind of fight. I think the place I'm more convinced will be the actual funding source for compiler security, ironically, is going to come from a lot of ZK stuff, because ZK circuits are much worse in terms of security vulnerabilities in some ways than the raw code, because you need the code to execute correctly as well as the proof, and they have to be synchronized. And there's lots of ways they can stay out, get out of sync, and in some ways, if there's more value locked there, I could see that being the place that there's something to be."
    },
    {
        "speaker": "E",
        "text": "Said there for, then perhaps money, funding flowing to languages such as solidsy and Viper, in the process of, say, verifying a transpiler down to something that works for ZK. I mean, that's around the house's way of doing it. But I think you raised a really good point. We talk so much about client diversity on the execution and consensus layers, and then we kind of seem to have accepted that for the most part, if you're writing code, you should be learning some JavaScript and you should be doing it in solidity. And I can see from a cynical business perspective why that makes sense. You know, woebet for the, you know, a catastrophic consequence if something like this was found in Solsi. And there's part of me that goes, we should have more languages, we should be more diverse. And yeah, it turns out it's very much the. Yeah, show me the incentives."
    },
    {
        "speaker": "B",
        "text": "I mean, yeah, your PhD is in Haskell."
    },
    {
        "speaker": "E",
        "text": "I mean, I will admit the last time I looked at anything compiler level for the EVM was Hebm. So like, yeah, I very much have qualifications in this regard. So yeah, I have opinions. I don't think we should be doing a compiling from a Haskell DSL down and making it mainstream, but I think we should have more. But as we see, even two is causing something of a stoppage in the dam of where funds go and what goes where. I think this is weirdly in arguments perhaps for this is the first time I've thought this through. We talk about things like where ethers burns to, I don't know, set aside a little bit of it for that, for ecosystem development. But that raises a whole bunch of weird questions about who's doing the development, who stewards the funds."
    },
    {
        "speaker": "D",
        "text": "Is this a, is this a plug for. What's that chain that has. Or the data fund?"
    },
    {
        "speaker": "E",
        "text": "I was explicitly not going to say CSR, but like, you know, it's the kind of idea like expenditure as public good."
    },
    {
        "speaker": "B",
        "text": "Given how much people get angry about anytime I mention them on here, I'm just gonna say, no comment."
    },
    {
        "speaker": "E",
        "text": "Yeah, it's good to see you all."
    },
    {
        "speaker": "D",
        "text": "Yeah, to your point, I don't think it's a philosophical, like, oh, we need more languages or fewer clients or whatever. I think it's more like a funding and sort of incentives problem. Right? Like this kind of reminds me of kind of like the log forge vulnerability from like two years ago. Or like you remember there's an XKCD comic of like you have sort of the modern stack and there's the one little egg and it's like you have some library maintained by like a dude in Kansas and like."
    },
    {
        "speaker": "E",
        "text": "Nebraska since 2005."
    },
    {
        "speaker": "D",
        "text": "Yeah, yeah. And you know, comparison with like the Nvidia compiler, it's like, yeah, well, obviously you have a multibillion dollar company maintaining this thing. There's sort of different incentives and different capacities to do so and so. Yeah, I mean, a couple of dudes who are maintaining Viper like, yeah, they probably don't have the resources to thoroughly test and produce as production grade, not."
    },
    {
        "speaker": "B",
        "text": "To show them I think overall it's, yeah, exactly. I was about to say it's kind of a valiant effort to try to run one of these fork languages. Right. You're like, you have no support. You kind of like, you generally have a smaller team. There's going to be technical issues where you can't be one to one with the main language that's supported and then the tooling doesn't really support you. It will do the bare minimum so that, hey, I can deploy my contract, but all the security tooling won't support you. And that in and of itself gets to a bunch of nuanced issues. But the reason you should be worried about these types of bugs is they're very insidious in the sense that if you find one, they affect many places all at once at the same time, which is very different than most smart contract bugs, which are usually isolated. Now, of course, there's going to be a ton of people who are like, hey, why don't you use my particular blockchain? We have these particular."
    },
    {
        "speaker": "E",
        "text": "Like, okay, chief."
    },
    {
        "speaker": "B",
        "text": "Which is never quite true. Never quite true."
    },
    {
        "speaker": "C",
        "text": "But this is one of the points that I also made on Twitter, which is that whenever you see something like this, regardless of whether or not you put the blame at the feet of the developers, theres going to be some sense of, okay, why did you get cute? Why didnt you just use solidity and kind of sit in the sort of technological monoculture that its like, look, solidity just has the most eyeballs. Its the most battle tested. Its got the most, essentially its got the biggest bounty on finding something broken, such that if there was some zero day sitting in the, in the wings, it would have been found much earlier than presumably it would be for viper, which basically has one big honey pot, which is curve like."
    },
    {
        "speaker": "E",
        "text": "I don't think that assumption holds. Right. Because there were enough people looking at viper stuff, and this stuff sat there for two years in the open. Right. You just had to look back a little bit. I mean, how many people can we do? We know that. We can say, like, hand on heart, know the solidity code base. I've barely looked at it. You know, like, I have my bugbears about how it compiles and stuff, you know, like the vir stuff. But like, this was my shtick and I barely know it myself, of course."
    },
    {
        "speaker": "C",
        "text": "Look, I'm not saying that. I'm not saying that. It's saying that I would blame the people. I would blame the people who are using viper. But I mean, this curve now has to answer this, whether, you know, some people are going to give them the benefit of the doubt as you just did, some people won't. And some people will think like, wow, you know, I'll just use uniswap from now on. Like, I don't even want to fuck with curve, because who knows what other mistakes they're making, or who knows if Viper is at all secure, given that this bug has been sitting around for two years and they never had the foresight to be able to notice that, hey, there's $60 million sitting or whatever, $40 million sitting on this old version. And in absolute terms, $40 million on this old version of Viper is not a big bounty, right? There's a very minor protocol sitting on page two of defi llama. That's not a place where I'd expect a lot of eyeballs to be poured over. So maybe it's not surprising that it took two years for someone to figure out that, hey, there's this reentrancy bug."
    },
    {
        "speaker": "E",
        "text": "I'd be fascinated to see the process by which it finally came out. Did someone finally decompile something old and see it's."
    },
    {
        "speaker": "B",
        "text": "Or were they just fuzzing expected translation unit versus deployed translation they found you could totally see like that type of thing accidentally working and you're just like brute force and you didn't think that hard, and then you're like, oh, okay, this must be the reason, because it's like once you see, it's like if you're doing parallel programming and you see like a locker mutex not working, it's like, oh, you know, that part of your code is broken, so there's so many ways that it could have been found. But I think the other point, I guess this brings is this is a problem that does occur a lot in security. You do run into these compiler bugs. It's just that they've never ever been quite as high stakes. I think the idea that the high stake compiler bug lasts forever in a blockchain versus high stakes compiler bug, my code is running and constantly being changed. It's local, it's a very different modality."
    },
    {
        "speaker": "C",
        "text": "Of what's it goes to, the assumptions about mutability. The idea that this thing should be immutable assumes that there's never a reason to change the bytecode, even if the solidity code corresponding to it is the same, or the viper code corresponding to it is the same. That assumes that the compiler is always correct, and there's no reason why one might ever need to swap that out, which you wouldn't make in any other environment. It's only really in crypto that we kind of bake this assumption in from the very beginning is that as long as this is the solidity code, not true."
    },
    {
        "speaker": "B",
        "text": "Spacecraft aerospace stuff does do the same thing where it's like you make it once and you, we had something that."
    },
    {
        "speaker": "E",
        "text": "Was built in the eighties and that it works just fine."
    },
    {
        "speaker": "B",
        "text": "Yeah, we're still getting signals from it. Yeah. There are like mission critical technologies that."
    },
    {
        "speaker": "C",
        "text": "End up, and that's where they do. And when they do, they do like the multiple versions of the same thing that are implemented in different languages. Right, exactly. And they do like some byzantine fancy stuff between them in case they're slightly different."
    },
    {
        "speaker": "B",
        "text": "They're not bitwise identical, but also from cosmic rays."
    },
    {
        "speaker": "C",
        "text": "I read about this also in case cosmic rays flip the flip bits in the instruction set or whatever."
    },
    {
        "speaker": "B",
        "text": "So I think you just have to have that mindset which ends up meaning you can't move as fast. And I think that's sort of why blockchains are interesting. They bring some people who are of the move fast, always break things, don't care mindset with people who are like, absolutely not. This is like an immortal tomb that you can never desecrate and has to be written perfectly up front. Whereas in aerospace it's like you always treat it like the latter, and in the rest of tech you always treat it like the former. Somehow you're interpolating between the two."
    },
    {
        "speaker": "E",
        "text": "It's weird. Yearn ended up being one of the latter because a lot of their stuff was in Viper, but they pinned to an ancient version of Viper. Don't know to this day if this was kind of just laziness and not wanting to go, this will do. We don't need it to change that much. The thing that changes is the strategies, and those are often implemented elsewhere."
    },
    {
        "speaker": "B",
        "text": "Yeah. One interesting thing, another framework to think about is if I take the sets of types of vulnerabilities in normal software development, I take just normal code execution bug logic doesn't match what it's supposed to. I take environment execution bug. Like, I found a way to get into something that's talking to that program and has privileged access and can, can change it. And then you have sort of like supply chain attacks, like code that the particular piece of code depends on is itself. You can kind of mutate it in place in normal software development, no matter how much every year, like probably once a year, I read some post or something that's like NPM, which is the main package manager in JavaScript. And every single web application somewhere in the world eventually uses it. Except for very esoteric web stuff. NPM people are always like, oh, NPM has tons of supply chain attacks and every once in a while there's a little thing that phishes you or some type of browser extension that fishes you or something like that. Certainly bored ape owners have been recipient."
    },
    {
        "speaker": "E",
        "text": "Of such attacks with this one NPm package."
    },
    {
        "speaker": "B",
        "text": "Yeah, no, but I think that like some, some of the craziest phishing attacks end up coming this way. Yeah, but supply chain attacks, to a normal software developer, if I, if I ranked all of those, they're probably like in the bottom 20% of security things. They're, they're not, they're not anywhere near the top ten. But this says that in crypto they have to be in your top three."
    },
    {
        "speaker": "E",
        "text": "Yes."
    },
    {
        "speaker": "B",
        "text": "Easy, easy."
    },
    {
        "speaker": "E",
        "text": "Because your compiler is effectively your, your entire, like your supply chain. Yeah, it is like, that is the whole chain. Yeah."
    },
    {
        "speaker": "C",
        "text": "Also it occurs to me that some people might not know what a compiler is. So maybe before we. I want to move on a little bit, but let me just quickly explain what a compiler is. When you write code, you write code in a high level language, like solidity is one we often talk about. Viper is this other one that we were just referring to that was involved in this attack. But Ethereum itself does not understand that high level code. That high level code is written to be easily understood by humans. But what, what Ethereum understands is much lower level instructions. Like add this, move this over here, flip these two bytes, whatever, and these instructions, which are called byte code or often called machine code, these instructions have to be translated from the higher level language to the lower level language. And that's what a compiler does. It basically turns this higher level language into this lower level language. And that's where the bug was that caused this reentrancy attack in curve. And that's why we're talking so much about supply chains. Now. Part of what I want to discuss here as well is about communication around security vulnerabilities, because that was also a lot of the drama that I was seeing on Twitter was not just that, okay, this thing went wrong and money was stolen, but also the way in which this ended up getting divulged seemed to have made things worse. I know a lot of security people have had strong opinions about the way in which people communicate about vulnerabilities in blockchain because it's not the same as it is in other domains. Do you want to speak to this a little bit, Laurence?"
    },
    {
        "speaker": "E",
        "text": "Yeah. So, you know, often when these things happen, we don't have time to file a CVE. We don't have time to, you know, like, we often, if you're dealing with anonymous teams, you can't even find a contact to speak to. And when there's something that's active in the wild, not neutralized, I think it's just incredibly silly to talk about. I think Bantek talked about this. Like, do not talk about live vulnerabilities until completely mitigated. And there are a couple of companies and security order places that I generally respect who did the whole, hey, just, by the way, here's a thing that's happened. I think the first one that was hit was jpegged. This is an active problem with Viper. Here are some other places that are affected by the same thing, and I just head in my hands, and Alchemyx was attacked three minutes later. If you've replicated that thing to start with, it does not take you three minutes to just point at different addresses and head into a private mempool. I think that's the thing. I'm angriest about this. I said on Twitter that it was clout addled stupidity hitherto unseen. And I can see similarly, the argument to go, people should know. I'm like, no, they probably shouldn't. I think that maybe 30 minutes of silence while people worked out and let people argue. I realize I'm being a little bit contrary to my. Everything should be transparent. But as soon as you make that transparent, and it's gotten, there's an argument for saying, just, I don't know, hit a telegram war room, we have telegram chats for this. We have eats. Security people are."
    },
    {
        "speaker": "C",
        "text": "Can you take us a little behind the scenes, Lawrence? When something like this happens, okay, let's say, boom, you hear that something has been compromised. Viper, blah, blah, blah. No one knows exactly what's happening. There's fog of war. What happens? Like, what is the chain reaction that happens behind the scenes that results in the telegram war room and who's in there?"
    },
    {
        "speaker": "E",
        "text": "The funny thing is, I'm not going to give you the answer you want, mostly because the process of talking, this means I will never be invited to another one. I mean, that is how it is."
    },
    {
        "speaker": "C",
        "text": "Okay, got it."
    },
    {
        "speaker": "E",
        "text": "There are telegram channels which exist, and things form very quickly between. As soon as you realize if it's a library that's affected or a particular protocol, there's generally someone that's kind of proficient. There are some people now that handle, like, the generalist side of things. Okay, we need to start communicating people. We need chain checkers, etcetera. That's as much as I'm going to give you, simply because I like helping out where I can. And if I get told you're going to media and saying, then that's it for me."
    },
    {
        "speaker": "C",
        "text": "Got it. So there's a code of silence among the people who are sort of the."
    },
    {
        "speaker": "E",
        "text": "No, it's weird because code of silence isn't the right thing to do, but you certainly don't want to say to anyone that would be kind of acting in a malicious way, be like, okay, if I do this, this is the timer that I have. This is the playbook that I need to kind of be working. Contra too."
    },
    {
        "speaker": "C",
        "text": "No, I understand. I'm kind of poking fun. I think what's clear, I think, to most people who have been in the space long enough is that there's a group of folks, presumably you're one of them, who are these kind of security people and white hats who are kind of on call. Basically, when something goes wrong on chain, figure out what can we do to mitigate what is affected, what's not affected. Do we communicate this to the right parties and make sure that everything kind of happens? It's a weird kind of distributed Ethereum defense team that often it's the same players who show up and are on call to try to mitigate these things."
    },
    {
        "speaker": "E",
        "text": "You flatter me. I wouldn't necessarily call myself one of them anymore simply because I find myself busy with a child nowadays. But like I said, as you say, there are people that are around and are willing to help. And so there are security telegrams, I think often within seconds of, like, a peck shield tweet going up. There are people chatting. Often there are protocols that are working, and in the back noticing, and you see it appear in six places at once if it's something known."
    },
    {
        "speaker": "B",
        "text": "One thing I would point out, though, is that I think you kind of need this radio silence more for these supply chain attacks. Because, remember, these supply chain attacks are like, if it's a bug of that form, every single thing that's ever been built with it is vulnerable at the same time versus if it's a specific protocol, then it becomes something more like, oh, well, all the forks are vulnerable. And maybe the forks are just like, it's harder to do the attack because of the deployment. There's a lot of nuanced reasons, whereas when it's a supply chain thing of this particular thing is always true for anything created in this way. Then it becomes like much more, much more, much more, much more."
    },
    {
        "speaker": "E",
        "text": "You know, and to speak to that, I think we can, to the degree that you can consider something like this, which is awful and shouldn't have happened, lucky in the sense that like, the blast zone was effectively constrained to two major protocols, of which one of them, you know, was out of the picture because of an older version of the compiler."
    },
    {
        "speaker": "C",
        "text": "Right. So let's continue on the story. So, just to kind of recap where we are so far. So these old pools and curve were compromised because of this reentrancy bug almost instantly because of somebody going on Twitter and basically saying, oh hey, look at this, this is happening on chain. And everything that uses the same compiler version seems to also be vulnerable, including these other protocols. Very quickly you had a bunch of folks jumping in and exploiting basically everything that was vulnerable within minutes. Now, one of the things that's happening on chain as kind of this on chain background radiation, is this phenomenon we call generalized front running. And so generalized front running is basically when you have these folks who are monitoring the mempool, looking for transactions that may make money in any possible way, they simulate that transaction as though they were the person submitting the transaction instead of the actual person submitting the transaction. And if it'd be profitable for them to do so, then they automatically will submit that transaction and try to go faster than you. So if you, if you make a trade that's gonna be profitable, they'll try to front run the trade. And that also means if you're gonna hack something, and that hack would be profitable, as all hacks are, or most hacks are, I guess, the useful ones, then they will do the hack instead and frontrun you on the hack. And because they're doing this automatically, most of the time, these generalized frontrunners, they don't know what they're doing. They're just running while they're at a ballgame, or they're asleep, or they're whatever, and this thing is just doing whatever it's doing on the background. And so we had a very interesting Mev day where some generalized frontrunners ended up picking off some of the hacked funds that were other buys being targeted by presumably copycats. Lawrence, did you get a sense of what was going on here, how that story played out?"
    },
    {
        "speaker": "E",
        "text": "I'd been busy watching and talking to some people at some of the other effects protocols like Alchemyx, when I realized that curve had been hit for the first time. And then I noticed that said, coffee babe. God bless coffee babe. By the way, if you ever watch this, had intercepted, I think, 5 million out of the curve attack. I think one of the things that, before I go a little bit further into this, I think one of the things I find really fascinating, and I say this a lot on Twitter, is that it's incredible that it's still basically a coin flip between whether someone who's performing an incredibly complex attack, be it at the protocol level or be it as we have here, somewhere less than that, maybe someone's aped the vector. Whether they have the sophistication to change their Ethereum RPC to a flashbot thing or not, you get people who are still going, here are eight figures of crime that I'm about to do. Let me broadcast it into the public mempool. It's, it's one of these like incredible, like incredible skill and then, you know, robbing a bank and then like stopping at the red light, it's, it's, it's baffling to me. I mean, I'm grateful that they're doing it because we have wonderful situations like you have searchers that are intercepting these things. And as people will have seen, I think there was a lot of chat about, oh, you know, Mev searcher coffee Babe picked up a bunch of it and others have as well. I think there's a lot of credit to other people as well, such as Pascal cavasaccio and so on and so forth. I'm not going to name them all. Wonderful work. Who went, okay, you know, I've got this, I'm going to return it to, you know, the address of my thing and then chat and say, okay, I've picked this up, where does it go? And I think like a large chunk of it has gone back to, I think metronomes received a bunch back because they were hit as well as Pendle. And I think like, I think there was something, it was JPEG, metronome, Pendle Alchemyx, the curve pool, dbridge and ellipsis were all hit. I think some of those were all like, here, have it back, which is great. I think this is a weird offshoot of white hattery where someone has effectively sleepwalked into millions of dollars and just goes, no, im alright, chief, you take it back."
    },
    {
        "speaker": "C",
        "text": "It is really beautiful. And in a way its a testament to the culture that ethereum has that youve got these people who are effectively built from the same material, you might think, as hedge fund magnates who are just ruthlessly out there competing every single day for every iota of expected value. But then when something really goes wrong, they're like, hey, everyone's got to buckle up and defend ourselves against the real attackers, which are, of course, the folks who were hacking this thing in the first place. I thought it was a beautiful little vignette. And also for those of, I imagine many folks have never heard of generalized frontrunning, but in situations like this, it ends up becoming an important part of the story. So, okay, let's move on to the financial part of the story. Okay, so far, we've been talking about the technology, the mechanics. I know, I know. I love how multilayered the story is, even though it's obviously a fucking tragedy. But it's also a very teachable moment, I think, for Defi and cybersecurity on this taking place. Obviously, people pulled a lot of money out of curve, and the value of CRV, the native token of curve, went down quite a bit, and so it dropped more than 20% over the span of a day and a half. And if you remember from a previous episode of the chopping block, we talked about Michael Igorov, who is the founder of Curve. And he has a very large amount of curve that he owns on chain, against which he was borrowed a lot of money and purchased a lot of real estate in the real world. And so presumably he has a limited liquidity profile, given how much he's balling in real life. And as the value of this curve has gone down, in addition to just what's happened broadly with defi going down over the last year and many of these tokens getting hit, he was already extended pretty far in, if you recall. I think it was aave at that time that originally he was at the risk of getting margin called. Now all of a sudden, with the value of CRV going down 25% plus and threatening to go down even more, as not only are people worried about, oh, my God, is there going to be some, you know, death spiral that's happening here? But now the fear is, okay, will Michael Igorov, will he exacerbate that liquidity spiral, causing CR V to just basically get vomited out into the market when his massive positions get liquidated? What is that going to do to Ave. What is that going to do to fracks? Which are all places where he's also borrowed a significant amount against the CRv holdings. So there was basically a kind of mass contagion of fear as CRV started getting hurt worse and worse as people started realizing this, and further, in some ways, many people shorting CRV to try to facilitate this and bring it on and say, hey, if we just get it to hit this threshold, boom, we can kind of knock his position entirely over and kill CRV. What Michael ended up doing is he went OTC because, of course, there's nowhere near enough liquidity for all the CRV that he owns. Struck up a bunch of CRV deals. I'm sorry."
    },
    {
        "speaker": "E",
        "text": "Well, not anymore, now that the kiosk."
    },
    {
        "speaker": "C",
        "text": "Yeah, that's right. That's right. Once upon a time. Once upon a time, there were people willing to buy and sell CRV. He ended up striking deals with Justin Sun, DCF God, and DWF labs, among several others, to basically sell them OTC, big chunks of CRV to give him liquidity in pretty significant discounts to market with very small lockups, so that he could repay a bunch of his debt and lower his liquidation thresholds. So I think now it's pretty safe to say that we're out of the woods on that front. Last I saw his, he was pretty close to. I want to say the liquidation price was pretty close to $0.40. Now it's closer to 30 something just because he's repaid so much of his debt on Aave Fraxland and on abracadabra. So I think things are looking much safer now. Correct me if I'm wrong, if anybody has more up to date numbers, his."
    },
    {
        "speaker": "E",
        "text": "Biggest vault is on Aave and currently has a health factor of 1.69, which is much better than it was."
    },
    {
        "speaker": "D",
        "text": "Yeah. The big issue, though, is you still own so much of the circulating supply. There's like 900 mil curve outstanding. And he owns, what, like, 3400 mil, something like that? Yeah, yeah. You know, even if you get liquidated, like, there's just no amount of."
    },
    {
        "speaker": "E",
        "text": "Where's it going?"
    },
    {
        "speaker": "B",
        "text": "Bids."
    },
    {
        "speaker": "D",
        "text": "Yeah, exactly. So it's like, in reality, aviv three obviously fixes this, and then they can limit borrows per asset type, but, yeah, it's kind of a mutually assured destruction at this point."
    },
    {
        "speaker": "C",
        "text": "Tarun, given that you were involved with this aave kerfuffle a few weeks ago, what's your take on this whole deleveraging situation?"
    },
    {
        "speaker": "B",
        "text": "Yeah, you know, there's not too much, you know, similar to Lawrence. It's actually still somewhat. There's still things going on. So I probably will not say. Okay, got it. But I will say, you know, we've spent a lot of time making proposals of trying to mitigate this historically."
    },
    {
        "speaker": "C",
        "text": "Is this an I told you so moment for you guys?"
    },
    {
        "speaker": "B",
        "text": "No, this is more just a, hey, look, we've made these proposals we've gone through."
    },
    {
        "speaker": "C",
        "text": "If you had only listened to us. If you'd only listened to us."
    },
    {
        "speaker": "B",
        "text": "It's more like directionally, it was correct. Things are kind of consistent. But the point of a DAo is that, hey, the DAo can be like, we don't want to do that. Right. So anyway, we put up another version of some of our old proposals. We're going to try to keep monitoring this. The emergency would have been if the Fraxland interest rate. So one thing that's worth noting is Fraxland. So Michael had two big positions. Of course, Aave is the biggest one. And then the second one is, was Fraxeland. Fraxland has sort of a PiD, controller style interest rates of the interest rate adjusts, so the longer the utilization is high, so the longer the funds are lent out, the more the interest rate goes up, the lower the funds aren't lent out. Vice versa. With the idea that, hey, they keep increasing the interest rate, then they can bring down the utilization, which lowers the risk. Right? So like, imagine you're a lender in the real world. You know, you've lent out all your funds, but now you're worried that some of your risky borrowers are going to default. You may try to make the adjustable rates for your adjustable rate component go up because you want to compensate for those defaults. So that's the thesis of the way they're looking at this, the way Frac's lend is designed. But the problem is, at the current time they were at 100% utilization. So the interest rate just keeps going up on its own. And there is a cycle between the two loans where one would, in order to keep paying, like one would be draining faster because the interest rates going up, the other one's sort of constant ish. And you borrow against the one that's constant to pay the one that's going up. And that was where there was a lot of worry and cycles of things that could go wrong."
    },
    {
        "speaker": "E",
        "text": "It was interesting to watch people trying to hunt him on fracs lend because the way that worked was, yeah, people would deposit curve, they'd withdraw fracs apy because the PiD. And I think there's what, yeah, a couple of hours where people are just sitting there going like just watching ping ponging between the two, which I found fascinating. Like, I mean, I have this more qualitative thing question. The what if about, you know, we talk about like the nature of using these lending protocols that have long tail asset support for like the tax free leveraging of assets to borrow against them or the selling without doing as much, and kind of saying that, you know, any bad debt that's incurred is not a me problem, it's a you problem. And I think today was the day where everyone kind of en masse, responsible for things, was like, oh, it's a me problem. And actually started kind of like, making efforts to mitigate some of that. They said. I think there were some pretty distasteful characters that were included in the OTC deals. My personal take on some of those people, which I found fascinating because it was at $0.40 on the curve with a three, six month handshake deal, or you can sell if it goes up to $0.80, which I found fascinating as kind of like this weird locked in situation between a bunch of big money about something, which could be a massive headache for Aave in particular. I find that it's so. I mean, GCR clearly thought that something was going to go the way of the dodo, because he added a bunch of ethereum single sided on v three, aiming at three to curve. I think that might be psyops. He's probably smart enough to know that wouldn't have happened with a liquidation because of chainlink, the way that it weighted towards central exchanges. There was certainly a weird moment to see that happen."
    },
    {
        "speaker": "C",
        "text": "Yeah, I will say, on the whole, I mean, it does seem like this saga is coming to a close now. I want to give just a few minutes for us to kind of take the broader reflections on what it means. A lot of the people. I mean, it was a wild 48 hours, I will say, very entertaining, and many different angles to the story, which is also part of what makes it so fascinating. A lot of people were saying that this shows that Defi isn't all that it was chalked up to be, and that it means you can't really trust this stuff because curve was one of the biggest, and everyone trusted it, and blah, blah, blah. I do like to remind people that, look, the curve pools that were affected were all very tiny old pools that were third party pools. The main curve pools themselves were completely unaffected by this. And on the whole, curve had, what, 3 billion in TVL of which roughly 30 something million was actually affected by this bug. And so it is. And of course, pretty quickly, people kind of came together, figured out what was wrong, and with a few caveats here and there, more or less got to getting everything else back in order. We didn't get a crv cascade, we didn't get a bunch of bad debt proliferating on a bunch of protocols, people kind of came together and worked together to help keep Defi resilient. And I thought that was a great example of, it's not always just about the mechanisms. People talk about that a lot in Defi that, oh, these mechanisms, they're self reinforcing, they're self sustaining, they're super powerful. But a lot of it is really about how you build your norms and the community and the culture. That's a lot of what kept Defi safe is just the instincts people had about communicating with each other and working together to help this problem from getting worse."
    },
    {
        "speaker": "B",
        "text": "I prefer another way of looking at it, which is in traditional finance, you can't really see all these positions. In some ways, people are always like, oh, we should have perfect privacy. Private Defi already there's some sense in which you want these kind of bugs in public Defi fixed or discovered and dealt with first, before you ever get to private. In traditional finance, you already have the private thing, but because you can't really prove any properties of what people's positions are, you never really know if they're solvent or not. You never really know the liquidity, especially for more liquid things. So in that sense, you would not be able to identify, you know, the types of things we're talking about of like, hey, like someone is borrowing, using their older loan to pay off their future loan until after it happens. And in some sense, that transparency is actually extremely useful for figuring out mitigations, and also for other users who are impacted by that, to adjust their strategies, which you can't really do in traditional finance. I'd say you're usually guessing what other users are doing. You're not knowing what other users are doing."
    },
    {
        "speaker": "C",
        "text": "There is the trade off, though, because we also talked about the adversarial nature of when it's on chain, you can see the stop and you know how to hunt it down, and you can spread fud about this and that, because everyone is kind of, everybody was looking for, okay, what's the level that it's going to take for basically curve to have this cascading liquidation spiral? That is something that you wouldn't have in a completely private system. So there's pros and cons. It's not obvious to me which of those two is better, but it's pretty clear right now that it's not a choice in front of us, really. We kind of have to go. Defi is Defi, and unfortunately, we don't really have a viable private version of it, at least not yet."
    },
    {
        "speaker": "E",
        "text": "Yeah. One of my, like, favorite analogies recently is talking about kind of flashback RPCs is dark pools, the analogy of, like, treadfy, and it'll be interesting to kind of see, like, you know, the way that, which kind of, as we start getting kind of more base level privacy, the way in which stuff starts splitting off into different things, that's kind of a kind of an auxiliary interest of mine. Recently, I said, like, I mean, I'm working personally on trying to do stuff like bringing kind of deals on chain and, like, kind of walking the walk in terms of defi, and the degree to which I think maybe that just adds signal instead of noise is yet to be seen. It fascinates me, although I am not as big brained as people like Turin here who look at this stuff for a living."
    },
    {
        "speaker": "C",
        "text": "I would like to see more private defi, though it is clear that, especially for large players, Michael Ligorov is probably the primary example of somebody who would benefit, at least from his perspective, from having some financial privacy. Having viable forms of on chain privacy, I think, would be a big boon to."
    },
    {
        "speaker": "B",
        "text": "I'm certainly not saying that, obviously, I should add some addendum. I certainly think it is necessary. But two things to remember is finance is never, ever can never be fully private. There always is some public information, like a price, a rate. Something has to be public for people to trade on some set of metrics, and those metrics have to leak something about the actual underlying assets. And so there's always this trade off. But the real question is, how can you make these things stable? And I would rather learn the mistakes with the fully transparent public stuff before going fully to private. I think this is going to, we have this now library of these mistakes to avoid."
    },
    {
        "speaker": "E",
        "text": "Well, we have a library, but they've not been collated anywhere. That's the thing, like I wrote last year, that, you know, whenever we see an error like this, if it's novel, oh, sorry, if it's alt hat, like, if it's a repeat of something, then everyone just gets, like, strips torn off of them. If it's novel, then people within, like, 48 hours will confidently assert that anyone could have seen it and only, like, the malicious or the novice would have overlooked it. We saw it even happen at the Della. We've started seeing it now with the viper incident, and I think one thing I'd like to bang on about is some group of us need to put the book together of the what do to not a hitchhiker's guide to not getting wrecked at some level. And I don't think it's ever going to exist."
    },
    {
        "speaker": "B",
        "text": "So the nature of security, much like the nature of finances, it's always this cat and mouse game. Whatever edge you have is, it's hard to make public. So anything that gets written is always a bit post hoc, like never is kind of can be written in the moment. And I think that's sort of the thing you face here. But the transparency means that the documentation is there."
    },
    {
        "speaker": "C",
        "text": "Right."
    },
    {
        "speaker": "B",
        "text": "It exists. Right. Just think about how many financial crisis must have existed in the world where there is basically no recollection or documentation of the cause or the solution. I bet you there's a lot of those in many countries, and in some sense, at least here, you have the chain as the form of reference forever."
    },
    {
        "speaker": "D",
        "text": "Yeah. I think it would be very entertaining to read the histories of some of the big hacks in crypto, but I think, to Tarun's point, it's kind of like rules are written in blood. And I think that's kind of true for crypto, where after any new novel hack, people change their auditing practices and testing practices and security practices, and what we sort of consider safe and stuff gets better over time. Even the concept of Viper having a library for lesbian reentry guard would have been a thing, I guess, was like six, seven years ago. And so this stuff, as we sort of learn about different ways of attacking, I think we sort of, as an institution, build those sort of natural antibodies, but not in a sort of implicit way instead of an explicit way."
    },
    {
        "speaker": "C",
        "text": "It did make me reflect, to be honest, that I feel like working in crypto this long has broken my brain, because on Monday, I know on Monday when I saw that curve was hacked, and I was like, oh, shit, how much was it hacked for? And it was like, oh, 30 million. I was like, oh, that's fine."
    },
    {
        "speaker": "E",
        "text": "If it's not the length of my phone number, I'm not yet. I sleep."
    },
    {
        "speaker": "C",
        "text": "Yeah, exactly, exactly. Looking back on this from, like, where Defi started when, like, literally all the money in Defi was about $100 million, I don't know, it does feel like security has to get simpler. Like, it can't be. I mean, to your. To your point, Tom, of, like, all of the, you know, the sort of the earned knowledge that is kind of tribal and is, you know, you go through the maze of all the decisions you can make building a protocol, and at some of those corners, there are just bones of protocols that came before you that fucked up in that particular way. It can't be that. It's that tribal. The knowledge of how to build things safely in Defi, that aspect of it has to get better. And I don't know how much easier it seems to be getting. It seems to me the answer is more and more that it's not easy and it's going to stay not easy. And instead, we are just investing more and more eyeballs, resources, and security into the few protocols that are super, super secure. And everything else, it's just caveat emptor. And that ultimately means that there's. I mean, part of that is just that few things really have product market fit in Defi. But the other side of it is that it's almost even harder for something new to get that product market fit when there's such a gap in security between things like uniswap and Curve and the next protocol that just is new on the block."
    },
    {
        "speaker": "E",
        "text": "If you had another hour to spare, I would give you my soliloquy on the tactics and techniques of auditing firms in Defi nowadays. But I don't feel like getting canceled by some of my friends, so that'll have to wait."
    },
    {
        "speaker": "C",
        "text": "Now, I really want to hear that."
    },
    {
        "speaker": "B",
        "text": "We should really talk about the bald stuff, though."
    },
    {
        "speaker": "E",
        "text": "Should we?"
    },
    {
        "speaker": "C",
        "text": "All right, that could probably fit in five minutes."
    },
    {
        "speaker": "B",
        "text": "Yeah, it's not that much. I would. I was just, like, looking at the clock, and I was like, come on. This is the best story of this week."
    },
    {
        "speaker": "C",
        "text": "Is this the best? Okay, tarun, I'm gonna let you. I'm gonna let you give the exposition for balls, given that it's the best story."
    },
    {
        "speaker": "B",
        "text": "As many of you know, Coinbase is launching a layer two protocol called base. I believe on a prior episode of this podcast, I quoted a tweet that I saw that described it as binance smart chain for white people, which got me canceled on LinkedIn, but not Twitter, which should tell you everything."
    },
    {
        "speaker": "C",
        "text": "It's also not wrong how it canceled on LinkedIn. What does it even mean?"
    },
    {
        "speaker": "B",
        "text": "Just people being like this. People, like, unconnected with you. I believe Laura posts these on LinkedIn. I remember I saw some comments."
    },
    {
        "speaker": "C",
        "text": "Okay, got it."
    },
    {
        "speaker": "B",
        "text": "I don't know if they were, like, directly in her thing or some other thing, but I think she doesn't tag."
    },
    {
        "speaker": "C",
        "text": "Me on them, which I'm very grateful for."
    },
    {
        "speaker": "B",
        "text": "I kept getting tagged in these things of, like, since I was like, hey, I'm just reading someone else's tweet."
    },
    {
        "speaker": "E",
        "text": "I think it was a tuba special. I'm pretty sure it was him."
    },
    {
        "speaker": "B",
        "text": "Yeah. And so base has been launched in sort of, like, developer only mode. Like, you know, the chain exists. You can sort, you can bridge onto it layer twos that are optimistic, of course, have this withdrawal period. So you may have to wait to get money back. But I guess in honor of the fact that the people who have are in trials with the SEC are bald or the ones who win, I forget exactly what the meme is. Do you guys know why?"
    },
    {
        "speaker": "E",
        "text": "Got to be confident when the guy at the top is bold, that bold is like, yeah, strong. Meaning there's a great mean, like."
    },
    {
        "speaker": "B",
        "text": "Like you are with this show, with Haseeb. Right? You're very confident."
    },
    {
        "speaker": "C",
        "text": "Exactly, exactly."
    },
    {
        "speaker": "E",
        "text": "Never trust in crypto."
    },
    {
        "speaker": "B",
        "text": "So someone made a meme coin called bald, and they deployed it. And of course we had this fervor of 50, $60 million moving into base, which sort of, it was meant to be a developer test net, not totally meant for real funds. But, you know, you can't stop the apes when they ape. So all this money went in, and then the deployer developers sort of rug pulled the people. In some ways, I think they're still debate as to how much of that is true. But once that happened, what happened was what always happens in these crypto scenarios where something awry happens, whether it's the curve thing, whether it's this. There's this community of these people on the Internet who are just constantly sleuthing and trying to figure out what they can about an entity and address a set of assets on the Internet. And it turned out the bald deployer is very connected to. Had done a lot of seven figure trades with Alameda, had made a lot of posts on the DYDX forums about how they should change their incentives, had clearly been doing algorithmic yield farming for a while, and not manual. You could tell from some of the rebalance moves. And it was sort of a thing that was like, this is a more sophisticated person. How are they so dumb to deploy off this address that has so much provenance? Then that led, of course, to the natural SBF deployed meme, which I don't think is true. No, I don't know. But there are, of course, a ton of ex Almeida employees who could have very easily been this entity, and that's where I suspect it is. Did I miss anything?"
    },
    {
        "speaker": "E",
        "text": "Well, the deployer has come back now, posted, I think, about an hour and a half before this. I realize you've got your hard stop. It's come back now saying as soon as there's another Dex that works, we're going to put more liquidity back and any profits are going to effective altruism like nonprofits."
    },
    {
        "speaker": "C",
        "text": "Nonprofits."
    },
    {
        "speaker": "E",
        "text": "Because I'm not profitable. So I'm looking forward to getting paid by an alameda associate. But of course, I mean, this is. This is psyops. You can't fool me. I am familiar with your game ball deployer. It's."
    },
    {
        "speaker": "B",
        "text": "Well, the best part was, I think there's another meme coin launched today called hair, which."
    },
    {
        "speaker": "E",
        "text": "Yeah, there were loads. Fuck. Ball was a. Honeydeheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheh and then, of course, like, leaked itself, went down because of an exploit, because it was solidly fork code. It's. It's been an auspicious start for base's developer only mode. I'll say that much."
    },
    {
        "speaker": "C",
        "text": "I don't understand how a developer only mode, how you can ape into a developer only mode."
    },
    {
        "speaker": "B",
        "text": "They just made it harder. There's no ux. Whatever it is, it is functionally running. It's just that there's no. None of the creature comforts of, like, easy to do for metamask."
    },
    {
        "speaker": "E",
        "text": "Yeah. You just had to sign redirect to a contract on Mainnet, and it would do a self transaction, and you're like, well, that's not a barrier. I did."
    },
    {
        "speaker": "B",
        "text": "This whole thing reminded me of when, during 2021, in the peak bull market, there were, like, all these TikTok influencers teaching you how to use change your RPC to binance smart chain and, like, go farming. What was the thing that had a safe moon? Yeah, I think that was what it was."
    },
    {
        "speaker": "E",
        "text": "Oh, God, we need a safe moon on base. I'm telling you now, boy."
    },
    {
        "speaker": "C",
        "text": "I mean, someday you're going to be telling your kids about the days when you had to manually change your RPC to. To use another chain."
    },
    {
        "speaker": "E",
        "text": "I'm going to get called a boomer because I."
    },
    {
        "speaker": "B",
        "text": "Do we sound like the people who talk about the dial up sound."
    },
    {
        "speaker": "C",
        "text": "That is absolutely who we are. That is absolutely who we are."
    },
    {
        "speaker": "E",
        "text": "I got into a discussion with someone the other day, and, like, the era, pre flashbots, about using gas price auctions to get into stuff that it was all public, and someone. Yeah, I got called a boomer on Jane. This was devastating to me."
    },
    {
        "speaker": "C",
        "text": "Oof. Oof. You live long enough."
    },
    {
        "speaker": "B",
        "text": "You live long enough with that. I think. I think the boomers got."
    },
    {
        "speaker": "C",
        "text": "We didn't even get a chance to talk about hex getting sued by the SEC. But maybe. Maybe we'll cover that at some point. But for now, we got to log off. Thank you, everybody, and we'll be back next week. Thanks, Lawrence. Dear everybody."
    },
    {
        "speaker": "E",
        "text": "Cheers, everyone. Thank you very much."
    }
]