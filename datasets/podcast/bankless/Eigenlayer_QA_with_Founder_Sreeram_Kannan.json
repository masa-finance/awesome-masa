[
    {
        "speaker": "A",
        "text": "Bankless nation. We got a live stream for you here today. We're going to get some questions answered about, I think, something that people have the most questions about, which is restaking Eigen layer, AV's networks, timelines, where's the yield coming from, what are we going to do? There's a lot of different questions. I have a lot of different questions that other people have. And I have sourced questions for the past two weeks from people around the crypto sphere, around the Ethereum ecosystem, both on Twitter, in my DM's, on forecaster as well. We are going to bang through all of these questions one by one by one. I've got 23 questions total. Some of them are redundant, so I'll ask them all at once. Some of them will be longer than others, some of them will be very short. We're going to get through all of them. We're going to get you guys some answers to the questions that you guys have about Eigen layer. So I'm going to bring on two people out of the Eigen layer ecosystem. One you might not be as familiar with, Nima Baziri, who I actually met at ETH Denver, 2019. He is joining the Eigen lair ecosystem, the Eigen Labs team, and also Sriram Kanan. Everyone knows Sriram, so we're gonna bring them on in just a second. But first, a moment to talk about some of these fantastic sponsors that make the show possible. I'm joined with Sriram Khanan, the founder of modern Restaking. Sriram, welcome back to the show."
    },
    {
        "speaker": "B",
        "text": "Hey. Hi, David. Really excited to be here. Looking forward to do this together."
    },
    {
        "speaker": "A",
        "text": "And also next to him, we got Nima Viziri, ecosystem research and development over at Eigen Lair. Nima, welcome to the show."
    },
    {
        "speaker": "C",
        "text": "Thanks so much for having me."
    },
    {
        "speaker": "A",
        "text": "Nima, you're a new face for us. Maybe give us a little bit of your introduction, who you are and what you do at Eigen Lair."
    },
    {
        "speaker": "C",
        "text": "Yeah, sure. So I joined the Eigenlabs team a few months ago to lead the ecosystem development and AV's teams that have been interfacing with the protocol. Right before this, I was actually a research partner at Polychain, which is how I got to know about the protocol in its early stages. And I just saw the ecosystem flourishing. So I was super excited to hit up Sriram, like, hey, what do you need help with? So I jumped on the board."
    },
    {
        "speaker": "A",
        "text": "Beautiful. And I'm enjoying having you here because I think I want a lot of questions answered about the AV's ecosystem specifically. So I'll be directing some of those questions to you. Some of the higher level, more general stuff I'm going to throw to Sriram, and I think that's actually where we're going to start. This first question that I've got was actually, I think this is kind of a troll question, but I think it's a good place to start. Anyways. This is from Permaweave. Why should I care about it? Sriram why should we care about Eigen Lair?"
    },
    {
        "speaker": "B",
        "text": "Different people care about Eigen lair for different things. If you are a builder, you know it opens up an opportunity for you to go build new things without having to secure a trust network on your own. You can build arbitrary new protocols on Eigen layer. That's why you should care about it. If you're a staker, you're staking in Ethereum. You're already putting your eth at risk in validating the Ethereum protocol. Might as well contribute security to other protocols and earn some rewards because of that. If you're a node operator, you're already running services for Ethereum validation or some other chain validation. One of the big problems as an operator is every new chain that you validate you have to sell to a new community of token holders. With Eigen layer. What we are able to do is the same community, many, many operations. So that's the value proposition to the operators. If you are building a roll up in the Ethereum ecosystem, you may be bottlenecked by cost and bandwidth and the economics and Eigen Da, which is on Eigen layer, is a solution that we're offering for you. That's the value proposition to the different sites."
    },
    {
        "speaker": "A",
        "text": "Beautiful. A couple of these questions, or maybe some of them will actually be in the same spirit. And so I'll ask them both at once. And these next ones, Nima, are going to you, dai, Suzuki, Reblock, EtH and also Niski. First question, what are some unique use cases using eigen layer? And then the second question, it's unclear how much need there will be for AVss beyond the early handful of examples. Where will the demand come from? I think the spirit of this question is, what are the flavors of avss? What are the different types of services that can come from these things? How do we even know that there is a there there nime? Maybe you can take this one."
    },
    {
        "speaker": "C",
        "text": "Yeah, sure. So I mean, right off the bat, a few things that are uniquely enabled by the protocol, let's just say bridging the economic security that we're dealing with here can just enable much more secure protocols to enable cross chain activities. The other thing that I'm personally really excited about is the idea of coprocessors where you have some crypto economic bond, but in terms of what the actual functionality of the co processor ends up doing, whether it's generic or hyper specialized, that suddenly gets enabled by any l two or even on the l one itself, those are just a couple ones. But in terms of another one, that's really interesting, I think is what witness chain is doing with the proof of location and the fraud proof network you can have, you can tap into the power of the ethereum network to effectively deploy a trust minimize fraud proof watcher, as opposed to having each l two itself claiming that they're providing fraud proofing service for you as well. I think that's going to make the community of fraud proofing any kind of optimistic system very much more robust."
    },
    {
        "speaker": "B",
        "text": "One thing I would add to that is a little bit of a high level response when people think the modular paradigm. The modular paradigm is chains where integrated solutions for all the different things that need to be done on applications inside the chain. But the model paradigm is, oh, maybe there are different modules, maybe there is a data availability module, maybe there is a consensus module and so on. And normally when people think about the modular landscape, they think of maybe there are three modules, maybe there is an ordering, maybe there is a consensus, maybe there is a, a settlement layer, data availability, some very few handful of modules. Our vision is a little bit different. If you look at the cloud era you see on cloud, there are thousands of thriving software as a service solutions, which are basically very hyper specialized focused services that if you're building a consumer application, for example, and examples of these SaaS services include like I want to offer a database as a service. There are tens or even hundreds of databases service. The reason is there are different types of databases, different types of there's a SQL database, there's a NoSQL database, and all these different, some optimized for AI, some optimized for different purpose, and so on. So you have these hyper specialized software as a service solutions. And what you do today when you're building an end user application is just concatenate a few of these software as a service solutions and then only build what components don't exist. That becomes a consumer application. That's our vision for what crypto applications look like. These applications consume a bunch of services that are built on eigen layer, say, and then tie all of them together and then offer it as a consumer application. So what might this be? And Nima gave, like some of the categories, we are seeing a lot of interest in traction, but the broader picture is you can think of, let's say, roll up services, right? So, you know, you're a roll up. You know, Ethereum is very deeply into the roll up roadmap. What are the problems that roll ups are facing? Can we kind of ways find ways to solve it? Can we find ways to do sequencing? Instead of having a single central sequencer, can we have decentralized sequencing? Alt layer is doing its version of it. Espresso is doing a different version of it. You can have, you know, watchtowers, which is how do you know that the rollups doing what it is saying it's doing. When you had a couple of big roll ups, then of course you can just, you know, there is a lot of extrinsic incentives. Everybody running block explorers, watching the network, you know, optimism, arbitrum. A few networks people can watch, but if there are thousands of these networks are, who's going to be watching? You need actually dedicated resources to be watching and incentives to make sure that they're doing the job that they supposed to be doing. So that's watching. Then you have bridging, like there's fragmentation of liquidity across l two s. We, you know, you guys have discussed this a lot in the show, so how do we solve it? You know, can we have instantaneous bridging across these l two s? Can we have new kinds of finality services? I come to finality. Usually the sequencer tells me like, hey, you know, it's final, or like, hey, there is a. I promise you, but instead, can you have economic finality? Can you have mev protection solutions? Can you have an encrypted mempool, like what shutter is building? These are all examples of the roll up. Adjacent services, like some services that I can just integrate in as a roll up, and then I get better as a roll up. This is one category which, you know, meta category. I would say we are seeing a lot of traction, but there's lots of other, like, verticals or meta categories. We're also seeing. Nima mentioned coprocessors. The idea of a coprocessor is you're sitting in Ethereum. I want to enhance the functionality beyond what functions I can call inside the eVM. Can I call an AI? And then I'm sit inside Ethereum. L one, call an AI and say, hey, run. Like the previous. For example, I've run a Dex and I say that my price is now adjusted. How much price I take on uniswap adjusted based on the competitive dynamic between how much sushi is charging, how much other dexs are charging, and then I adjust my prices up and down. The intelligent defi, for example, can happen. If you have a processor like coprocessor like that, maybe you want to run a command which is actually like, you know, something that normally run only on a Linux machine, so that that be a general purpose co processor. Maybe you want to run a command which is a SQL server. Like I just call a thing and say that, hey, load this database, a query to the database and give me the response. And I want that back on ethereum. So these are the kinds of examples we're seeing inside coprocessors. But there are other categories like cryptography, like can I run more advanced cryptographic like solutions? Why do we need this? Because, you know, blockchains are usually like transparent ledgers. That makes it verifiable. But you know, there's a trade off against privacy. So I want to have private but verifiable systems. Can I split the secret or information across the many nodes? So you need deep access into the distributed system, into the consensus to change. It could be secure multiparty systems, trusted execution environments, fully homomorphic encryption. These types of categories that we're seeing on Il, these are some of the broad categories. The one thing which you know, which is we haven't seen built already, but we've seen proposals, is how to modulate some commitments on ethereum l one itself. All these other things are outside of ethereum l one. But I'm a block proposer on ethereum l one. Can I promise that I can do a pre confirmation for a transaction I include in an l two. I'm staked. So I tell you, as a kind of like a block proposer who's going to propose the next block. I promised you that. Hey, when my slot comes, I am going to include your transaction so the l two can have an instant confirmation with economic security. So these are the kind of like range of things that we are seeing. We did not invent all these categories. Most of these categories came de no out of permissionless innovation. And that's what's really fascinating."
    },
    {
        "speaker": "A",
        "text": "Yeah. One of the things that I think really gets people's imaginations going about Eigen layer is there. It's pretty boundless. The design space is pretty boundless. But that also makes, that leads into my next question here from Ethan Lippmann. If we have such a boundless design space, and I'm assuming that also goes into the fee structure that these AVss charge. How will AV's rewards payouts work if they can charge their fees in their own kind of network and their own token, and ultimately goes down to the e staker on the layer one. What's like the supply chain of value flows from fees charged on the AV's network while they're, while the application is being its business, going down to the eth staker who has restaked their ether. Is that a NEMa question or is that a sreeram question?"
    },
    {
        "speaker": "C",
        "text": "I'll let Sriram take the first step at this, but I'll chime in with anything he hasn't covered. Cool."
    },
    {
        "speaker": "B",
        "text": "Yeah. So the idea is that there is an AV's consumer. Imagine an AV's like something concrete as an oracle. This is an oracle. An AV's consumer is an dap that is calling the Oracle. So that's where it is starting. But the DaP itself has a user. I'm calling a swap or a lending protocol, which needs to call an oracle that. Oracle is now triggering an Eigen layer AV's oracle. So there's a fee that is being paid to the oracle. So the oracle accumulates all these fees in a potential. The oracle has a certain obligation to pay some fees to the Eigen layer stakers, which is specified by the AV's model. For example, it says that, hey, for this much amount of stake, I'm willing to pay this much amount of eTh or this much amount of my token emissions. And that is paid periodically to the stakers and operators. So essentially it comes from either the user to the dapp, the dapp to the, to the AV's, and the AV's to the staker and or operator. And it looks like it's a lot of layers. And like some people complain that this could be a big problem for the, this kind of a modular economy. But I think that's simply not true from our experience in the cloud. Like each consumer application in the cloud integrates 15 SaaS services in the backend. These are all abstracted out that now as an end user of a particular application, you wouldn't even know that they're using all these things in the backend, but they are. And they have like, you know, different periods and settlement periods for when they pay these fees to these SaaS services. Something's a monthly subscription, something's a pay as you go. All of these things are happening in the backend. And that's roughly why we think that it is going to be okay. That you have more complex value flows. Because our bet here, when we're talking about permissionless innovation, is really specialization. This is really what drove the SaaS economy, is if you just look at the broad arc of civilization, it bends towards more specialization. We all become more and more specialized in what we produce, but more and more generalized in what we consume. These avss are going to be exactly the same. They're going to be very specialized in what we produce, what they produce. But end users are going to consume many of these things and pass a little bit of value to all of these. And actually, this makes for a very much more efficient economy. Because if you ask the question which is going to be the best chain, it's a very hard question to answer. If you ask the question who's going to build the fastest NoSQL database, it's a much, much more narrow question you can zoom into. Or this guy has this experience, that experience, it's a b two B system. And then actually they can go and build it. So that's why I think it is okay. Not only okay, it is actually great that you have hyper specialization and a sharing of value across all these layers through the modular stack."
    },
    {
        "speaker": "A",
        "text": "Nima, anything you want to add there?"
    },
    {
        "speaker": "C",
        "text": "I'm just fascinated by the fact that this permissionless market is going to enable all the various flavors of services. I just view it as we've seen distributed systems, these backend infra providers, be able to do what they do over the past 2030 years, except now you have this crypto economic angle attached to it, where you're building on a substrate that as long as there's a market for something, no one's going to be able to tell you you can't provide this functionality. So it's very exciting."
    },
    {
        "speaker": "A",
        "text": "Yeah, I think maybe part of the spirit of the question is that one of the reasons why everyone is getting excited about restaking is because we love ether and we love staking ether, and we love the yields, and we get more of it this way. But then there's also a tension, I think maybe, at least I suspect, in AV's networks that also have a token, where maybe a lot of the economy in that AV's network is the token, and then that AV's network is paying in that token, but then the ethakers want eth, not the token. And so in order to pay rest, a th that token has to be sold, which goes against the incentives of the AV's network. Uh, and so, and also then, like are eth restakers is collecting a bunch of tokens as the yields. Like, how, how are you have any clarity that you can provide here on this one, Sriram?"
    },
    {
        "speaker": "B",
        "text": "Yeah, I mean, this is the power of, uh, permissionless markets is we can't say whether this is going to be the market. Eth stakers demand that they get only paid in Eth. We will see that. That's what happens if we see that. Yeah, actually, ETH stakers want all kinds of liquid tokens. Then that's what will happen. If we see that actually ETH stakers want, or are willing to take even locked AV's tokens with a kind of like a vesting, that will happen. The thing is, we are very unopinionated about it, and we view this as an emergent property of what it's like. You can dial back, say, four years before the defi summer and then go ask Justin or Vitalik or somebody else at the Ethereum or Tim Beckett or somebody at the Ethereum foundation. What can EtH be used for? Right? I don't know. It can be used for, you know, in a DeFi protocol like this. It can be used in a, in a defi to provide liquidity provision, but to earn, like some farm, like, you know, all of these things are possible, and we'll probably see a combination of all of these things. And also, stakers might segment by preferences that maybe stakers are very purist and they just want to take ETH, or they're not able to take for legal or other reasons, anything else. There will be stakers who will take all these other things. But going back to the kind of high level thing about, is there a conflict? I think there is no. Like, the idea is that the ETH staking, if it is beneficial to navias, theyre going to use it. If its taking is not beneficial to an avias and their own token staking is more beneficial, they absolutely should use their own token staking. We are not taking a kind of any opinionated position on it. In fact, eigen layer itself, the contracts are returned to enable dual staking and multicore and staking. So you can stake EtH, you're building an oracle. You can have your own token, and you can have ETH staking. You can say that, hey, I'm borrowing some amount of security from a neutral substrate and some amount of security from an opinionated, like, aligned substrate. It's actually like game, theoretically, very interesting and useful to actually do that, because the neutral substrate is neutral, and therefore more externally verifiable, the neutral substrate. But can only be slashed on specific violations, whereas my own token holders have exposure to just what is happening in my system. And that is a different kind of crypto economics. And actually promoting this is what we think is the best thing."
    },
    {
        "speaker": "A",
        "text": "Right. Maybe that question specifically is like how to couple the income being generated from avss and then transfer it over to the restakers, the ETH restakers. Maybe that question is actually more appropriate to ask the LRT level of the, of the stack because they are the people actually more or less in charge of these flows. So maybe that's actually. Yeah, if eigen layer is unopinionated, then Eigen layer is not the actual place to target that question. Maybe, maybe this is a question for the LRTs."
    },
    {
        "speaker": "B",
        "text": "Yeah. We are also seeing interesting kind of payment management type services emerging. Somebody may say, hey, subscribe to my you stake. You don't even have to go through an LLRT and subscribe to my payment management service. I'll collect all these tokens, I'll do an RFQ auction, and then later I'll give you like your tokens in Eth. So these we view as again, emergent structures rather than like enshrined opinions. So absolutely the lrts. Therefore, not only LRT is a liquid restaking token, it's a token that represents a position on eigen layer, but also represents an opinion on what set of operators should be used, what set of avss you should stick to, but also what rewards you want to collect and how you want to do treasury management of these rewards. So the dimensions of opinion of a liquid restaking token are far higher than a liquid staking token, right? Which is your stake, stake in Ethereum, you're complying by protocol. You have no price fixing abilities. You just take what protocol does. So Ethereum is this rigid, solid underlying substrate, whereas Eigen layer is this very anything can happen kind of a substrate."
    },
    {
        "speaker": "A",
        "text": "It's funny that you say that, because there's the variety of opinions that liquid restaking tokens could have, which is good because there's so goddamn many of them. There's like 15 of them out there. So maybe we will see all those opinions expressed. Nima, these next set of questions I want to ask to you, and these are all about, um, the logistics of AVss. Three questions here, kind of all in the same vibe. Can an AV's be aware about the state of other AVss? If an AV's creates a slashing event or slashing events, how can other AVss be aware of that and become aware about the change in collateral for that's being shared among AVss. And then are the scenario, are there scenarios in which one AV's, the slashing event for one AV's could trigger the slashing event of another AV's. Maybe you could take in these and however you want."
    },
    {
        "speaker": "C",
        "text": "Yeah, I'll start with the first one. So the background image that Sriram painted is these services talking to each other, right. These abs's. So in the same capacity, you can imagine how an AV's talking to another AV's has the capability to read some state. Right? Now there's on chain contracts, there's auction software being run. But depending on the exact nature of what is happening for an ABS, sure you can say avs a their off chain contract, whatever the operators are running, can watch for some state change on ABS fees contract, right? So there's no limitation in terms of like who's aware of what's and what's happening, right? Which I guess leads to the second question a little bit, in that the design for slashing, which is a feature we're going to come out with later this year, are still, we're thinking very thoroughly about how that's exactly going to work mechanically to reduce the risk as much as possible. But then again, if an AV's operator can read a slashing event on another AV's, right, it can choose to react to that under whatever kind of path or behavior they just implement. So it's nearly, almost entirely up to the application ABS developers discretion in terms of how they want to take slashing as a mechanism and as a reactionary thing into account. I guess the third thing, which is in one slashing event have an effect on others. That would probably be a function, or it depends on how the slashing mechanism ends up working in its final version, in the version that we're going to release."
    },
    {
        "speaker": "B",
        "text": "I'll just add one thing to all of these things, is all of these events are reported back to Ethereum. Eigen layer is an ethereum centric system. So any AV's which is actually, there may be avias which don't interact on a kind of like a routine basis with Ethereum, but all of the AV state is reported back to Ethereum on a periodic basis. Whenever it's reported, it's that on Ethereum, it's on the Ethereum contracts. So now, like, I can write a contract which is dependent on all these other things. Like for example, whenever a slashing is triggered on any AV's, that's going to be reported to the Eigen layer core contracts, because it's reported to the Eigen layer core contracts. I can read from another AV's that, yes, that has actually happened, and so I can react to it on a much more instantaneous basis. So this is really why we think that having one coordination engine for all these services is the best architecture. Rather than saying, hey, I have an LR, let's say this is a misconception that people have, that, oh, you know, now that the Eigen layer is there and it's allowing lsts to stake, somebody else can build another layer, which takes LRT's and then allows them to stake, and so on. But the right architecture is actually a much more integrated architecture, which knows what's happening across all the different layers. In fact, this is one of the reasons we keep saying that it'll be even better in a future when Ethereum can integrate Eigen layer more natively, because the cross communication between Ethereum and Eigen layer can be even tighter. Like how much of security is used by other things, how much of security is reserved for Ethereum. All of this communication can be much, much tighter if it's in the same system. But inside Eigen layer, all the state is on a common eigen layer contract. It knows when, like your slashing has been triggered on any AV's. It knows when state updates have been made on any avs. So all of this is routed through a common contract, which is a common source of information. And like Nima said, you can pull from it as often as you want. But I think in the worst case, all the AV's contracts will pull at least at something like a few days period, because you don't want to be desynchronized more than that. And that's the kind of challenge or fraud proof period in Eigenlair."
    },
    {
        "speaker": "A",
        "text": "Moving on to a question from cloudy eth shout out. Christy. That's our community manager at bankless. What happens if an Eigen layer, AV's operator with delegated lsts gets slashed? What happens with the lsts? Where do they go?"
    },
    {
        "speaker": "C",
        "text": "Sriram, you want to take this?"
    },
    {
        "speaker": "B",
        "text": "Yeah, yeah. You know, so there are two types of slashing that can happen on Eigen layer. So Nima was mentioning that we have, you know, upcoming designs on the full slashing mechanism. But there are two kinds of slashing. One is burning, right? You just burn, burn the stake. The other one is redistribution, right? And the simple version to burn would be to just burn the LST. This has some kind of different kinds of consequences for different people, but one could also think of the actually what is happening in the Eigen layer contracts is the LST is not burnt, the LST is frozen into the contract state. So you can't touch it, you can't do anything with it. It's just stuck. It's like a stuck token. But that's what actually happens in our v one design. But we are going through some thinking on the different slashing architectures. But the thing is, there's also redistribution. And redistribution is I take the LST and give it to the harmed party, slash from the bad guy and give it to the harmed party. The other guy has the LST. So that's what happens. So that's why when an AV's is whitelisting which lsts to use, they should have some measure of trust on the LST because, you know, that's what's getting handed over across the different parties. There is a more sophisticated architecture on burning, which should be to like exchange the LST for ETH and then burn ETH. But you know, we do expect that slashing is, you know, a rare event because operators have to be malicious and they know they're going to lose their ETH. So we're not over optimizing for burning ETH. In this scenario."
    },
    {
        "speaker": "A",
        "text": "Seamus on Farcaster orange Seamus ETH asks, how will delegators, operators and AVss adequately be able to calculate risk? The problems here will be incredibly dynamic and involve unclear dependencies. I'm not sure it's solvable, let alone by all parties routinely. So I think it's a little bit of just the unknown unknowns about risks. Question Nima, you want to take this one?"
    },
    {
        "speaker": "C",
        "text": "Yeah, this is a super interesting question. A lot of us have spent some, quite some time thinking about, and I guess to approach this, we can take a look at it from the perspective of each of these different stakeholders. For example, as an AV's developer, what does risk means to you? Is it the operators that are serving your AV's? Is it what lsds they have delegated to them in terms of restakers? Which operators do I want to give my stake to? What is the distribution of the operator set look like for me to be able to assess who's riskier and who's not? In terms of operators, they also have this duty of being able to, or wanting to rather look at the nature of an AV's and saying, how complex is the logic for serving this application and how much load does it bear on, for example, my physical infrastructure that I'm running? Am I going to run into bottlenecks that affect my ability to run another abs. All these risks or things that the various stakeholders have to take into account essentially compound. And depending on how you slice and dice an exact combination of these stakeholders, you're looking at a different picture."
    },
    {
        "speaker": "A",
        "text": "Moving on to a question from a token terminal. How do they, this might, there might be no answer here. This might be a market forces thing, but we'll see. How do they see days, you guys, Eigen lair see the take rate in the ecosystem. For example, $1 paid by an AV's. How many cents goes to restakers, how many cents goes to operators? How many cents goes to eigen layer? Nima, do you have an answer here?"
    },
    {
        "speaker": "C",
        "text": "This is still being thought out, and we're taking a lot of community feedback from what AV's developers like to see what operators are comfortable with, what ranges they think is reasonable across what type of assets. Because it's such a nascent space, it's still something that we're actively figuring out. That's where we're at."
    },
    {
        "speaker": "B",
        "text": "Yeah, I think, you know, that there are dimensions of pricing and that we are thinking through the dimensions also carefully. For example, pricing need not be only for stake. Pricing should also be for the complexity of computation. So we are thinking through, like all the other systems that exist and see how we can absorb some of the best practices from there and also failure modes. For example, one of the things that happened in Cosmos interchange security is operators are running these other services by taking a cut of the fee, other chains by creating a cut of the fee. And if the fee volume is low, you are expending a lot of energy, but you're not getting that much fee. So we should charge not only for stake, but also for computation. And when you're talking about stake, there are also dimensions of stake. Where is my stake just going to be burnt for, for this? Because that's a different risk versus is my stake going to be redistributed? Because there may be a different kind of incentive for that. Is my stake. Is my entire stake burnt when I make a mistake in an avias, versus is only a portion of my stake burnt when I mistake, make a mistake in this AV's. So there's lots of different dimensions here, and pricing will have to reflect all of this. So it is still under active design on the specifics of how the payments get distributed across all of these things."
    },
    {
        "speaker": "C",
        "text": "Yeah. And to add on top of that, the reason why I said we're still so early in how this might look is because it's a problem that I think the broader industry is thinking about. Right. When you look at Solana and fee markets, or the concept of the discussion on multi market and multidimensional fees, like the notion of what a fee even is around what type of resources, who is providing those resources? All of that is. Yeah, it's just being explored."
    },
    {
        "speaker": "A",
        "text": "Yeah, right. I remember. That's still, I think, an ongoing conversation. Even when we talk about resource pricing inside of the EVM as well."
    },
    {
        "speaker": "C",
        "text": "Right."
    },
    {
        "speaker": "A",
        "text": "Thadyth asks, how long does it take to unstake? And then I'll add myself, why is there an unstaking waiting period at all? Sriram, you wanna take this one?"
    },
    {
        "speaker": "B",
        "text": "Yeah. It takes seven days to unstake today. And why is there a seven day period? Is because when you stake and you provide security to services, what we don't want is you stake, you provide security to your service, attack the service, unstake, and then go swap and get out. Unstaking should have a lag greater than the lag within which any misbehavior will be detected. That's why we have the unstaking period. But it provides unintended, and maybe not that unintended from our end, an unintended benefit, which is actually fund safety. So you stake a lot of funds in eigen layer, and one of the things you have to be worried about, what if it gets hacked? What if people just like, take all the ETH and go? That would be like an absolute disaster. One of the things that protects it is to withdraw any unit of money out of the Eigen layer. Contracts is going to take a week. I know already you've queued the withdrawal. You have to wait a week. This slows everything down to human timescale. No monitoring. There is passing. There is a security council comprised of 13 members who are outside the Eigen layer, core team. All of that can actually kind of come in and step in to do something in case there is a problem. But that's kind of like an unintended side effect of the core reason, which is for fraud proofs."
    },
    {
        "speaker": "A",
        "text": "Elco Eth writes great songs. Sometimes we put them into the roll up. He asks, how big do we think the premium will be that Avss put on solo stakers? Is there a good enough way to determine who is a solo staker? He's asking because there is. This is the one way that I can see that Eigen layer will actually increase Ethereum's decentralization. Sriram, do you have an answer here?"
    },
    {
        "speaker": "B",
        "text": "Yeah. What premium AVss will put, like I said, we are like a little bit of an open market type project, so we don't know what will happen. But there are clearly, absolutely clearly there are places where I, you know, AVss just want more decentralization than just one more stake, right? You know, I want to sequence transactions for a private roll up. I want to do like, you know, where the, so the high level heuristic is where I cannot attribute false and slash for them more stake doesn't mean much, but many independent parties consistently verifying and are coming to agreement is actually the benefit. So services which have that structure, imagine I take a secret and then spread it on many, many nodes. If it turns out Coinbase is all these nodes, then I didn't spread my secret to anybody. The guy has all the copies of the secret, so it's useless when I'm doing secret sharing, when I'm doing sequencing, essentially for any non slashable false. I want to have a decentralized community. And okay, so that's the types of things where, like types of AbS's where they would absolutely want more decentralized operators. The question is how much, you know, so one question is how much premium, which I said, you know, it's emergent from the free market. But the other one is how do you detect whether somebody is a solo sticker? I think this is a harder question, but it's one of those questions wherever, you know, Nima mentioned earlier, like one of the services building, which is a proof of location. And you know, you have to be in, you know, many different locations. So there's a geographic, you know, diversity benefit, for example, that that itself. So witness itself is an AV's, but there could be other AVss which not only track like operator location, but do something more opinionated. It could be an oracle that is basically a decentralization oracle, which looks at all the statistics of stake distribution, historic correlation with exchange wallets, all of these things, and then puts in a Merkel wrote of these are the most likely to be decentralized. And this is not opinionated from the Eigen layer point of view, but this is a service that somebody else can say, yeah, I know, I trust this opinion, and therefore I'm going to recruit stakers from this or operators from this set. Again, emergent downstream rather than entry."
    },
    {
        "speaker": "C",
        "text": "Something that I think is particularly interesting on this front is when you have solid seekers, irrespective of the kind of hardware that they have. One thing that we're noticing is a lot of networks rely on this component of a keeper or a relayer where the computational bandwidth of what you're actually relaying is not super high, but depending on where you're located, you might want to have many, many of them spread across all over the world. So the more of those you have within your system, maybe it's latency you care about. Maybe it's censorship, resistance, whatever it is. If you can go through multiple routes from point a to point b through these lightweight, maybe not even lightweight, solar stakers, that's a very emergent property as well."
    },
    {
        "speaker": "A",
        "text": "I think maybe part of your guys answer is that it's actually not necessarily being the binary of, oh, you are a solo staker, you are one person. But it's more about how much net decentralization do you add to the system when we measure decentralization in a variety of different ways, because there is no good way of just being a solo staker actually is only one bit of information. There's other bits of information there. Okay, so there's four questions here. They're all about the same thing. We kind of have touched on this, but I want to dive headfirst into this subject. Jennia asks, how do they respond about the risks of re staking being a daisy chain of potential risks? Clairvoyant asks, what doomsday scenarios have the team simulated or envisioned? Chainlink. God says, how does or should the Eigen restaking ecosystem approach risk management, particularly managing the second or third order effects of LRT's, LRTFi, cascading, slashing conditions, av's selection priorities, leverage caps, et cetera. And lastly, what's matter? CFA says it looks like a lot of rehypothecation in tradfi. How do you quantify the risk? I think this is what people's like. First, gut reaction goes to when somebody explains what restaking is. Like, oh, you take your e and then you stake it again, and then you can also keep on doing that over and over and over again. And people are like, oh, okay, great. So, like, you know, cascading liquidations. I'm sure you guys have answered this many, many, many times. What's, like, the simple way to explain the scenario here? Not that this isn't a risk, but just like, how do we provide more knowledge about what's going on?"
    },
    {
        "speaker": "B",
        "text": "Yeah, I think there is. We put out a detailed risk document, so I think that's maybe a good place to point it. We can put it up on the YouTube link afterwards. I think that'll be awesome. But the high level thing is, number one thinking of, I think the term restaking is what throws people off. If you know that the exact same concept, for example, already existed for many years in cosmos called interchange security. It's called interchange security. So nobody thought of exactly the same questions. But here's the thing that when you stake. So the right way to think of this is shared security. So imagine there are 1000 protocols, each of which can have $1 million staked. Okay? So this is one world, another world, and you take the same fees and then now aggregate them into a $1 billion pool, which is restrict across thousand protocols. Which world is better? Let's say in the first world, to attack a protocol, you need $1 million capital. And then if you do attack it, you're probably going to lose half of that 1 million or something like that. In the second world, to attack any one protocol, you need $1 billion capital. When people are comparing the two scenarios, usually what they're doing is they're thinking there are 1000 protocols with $1 billion each. And then on the right side there is 1000 protocols with $1 billion restake. But that's just not the right comparison. At the same fee parity, if there are 1000 protocols each paying a certain fee to maintain $1 million stake, you pay the same fee. You can actually sustain a $1 billion in a shared security model. So security is growing as you get more protocols. It's a very, like, obvious thing once you state it like this, but that's what's happening. Okay? So you have much bigger security that is supporting all these things. Okay? Now you do lose something in the second world. So the second world is better in the obvious sense that to attack any one protocol you need like 1 billion. But there is a little bit of a deficiency in the second world, which is there is no unique attribution of this 1 billion to any one protocol or, you know, how much is going to each protocol, which is what is leading to all these questions about, oh, you know, I don't know how much I'm getting. There's a lot of risk and all of that. And the way we solve it is by a principle we call attributable security. Attributable security is the following concept says that an AV's gets this benefit of pooling, but in addition, AV's can buy a particular ability to slash and redistribute a portion of the funds. Let's say AV's won. Out of this $1 billion slashable AV's, one buys $25 million worth of attributable security, which means if something goes wrong on that AV's, the Eigen layer protocol maintains this complex calculation, which is what people are thinking, how is this going to happen? This is going to be in protocol. In the eigen layer, protocol maintains what we call a solvency calculation. Calculation ensures that whatever happens, how many other protocols trigger slashing simultaneously, you will be able to redistribute your 25 million, your attributable portion. Now suddenly, all this question about, like, over leverage and everything else is just simply gone, because each AV's has a unique, specified attributable portion of slashing, independent of what happens in all the other avss. So this creates compartmentalization. I know exactly how much I can redistribute if I slash. And so this is actually the, you know, one of the tightest system of crypto economic security. It is not a leverage system with, you don't know what leverage is happening. You know what? It's not like that. It is pooled security now. So what is the benefit you're getting? The benefit you're getting is in the second world. Now, even though I have only an attributable security of 25 million to attack my protocol, I still need a $1 billion capital. I'm just much, much more secure in the second world than having my own $25 million world pool in the first world. So that's, that's the first picture about shared security and attributable security. This changes the dynamics of how people think about AVSS compartmentalization. So another like point is between Eigen layer. So we can do this inside Eigen layer, but to do this between Eigen layer and Ethereum, because, you know, we don't build Ethereum, so we have limited interfaces to Ethereum. But the nice thing with Ethereum is Ethereum is actually extremely high security. So there's a lot of stake in Ethereum, $70 billion or whatever today's price is there. But there's a lot of stake in Ethereum. And the ethereum's security requirement is not all of this, 70 billion. And this is a whole other discussion to understand exactly how much security is needed. Because staking is not fundamentally protecting all the value, all the TVL that is sitting on Ethereum, the staking is only protecting the value in flight in Ethereum. So that's a whole detailed discussion. But what happens is Eigen layer, as the amount of assets restake between Ethereum and Eigen layer increases, let's say it's 100% of Ethereum stake is restaked on Eigen layer. Eigen layer will not sell attributable security for this entire 100%. It'll take a back off, say something like 50%, we don't touch. We're only selling insurance for the remaining 50%. So what this does is basically there is a buffer thats maintained to make sure that Ethereum, its an accounting for making sure that Ethereum security budget is at least that much. And the remaining is attributed to all these avss. Thats the way we deal with that. And then finally lrts, right? Initially when one year back, we were thinking about lrts, we were actually worried that lrts can have all this financialization and risk. And there is some truth to it, but theres also the other side of it, which is imagine there are no lrts. So thats how Eigen layer is natively. There is no liquid restaking position or like a fungible position. But what could happen is im a staker, I stake in Ethereum and Eigen layer. And then now I have a position. And, you know, people want to borrow against this position. So somebody could potentially build a borrowing protocol against an eigen layer position. This position is non fungible and unique. And so the only way, if my position is now liquidated, the only thing that you can do is now you have to go and trigger a withdrawal from Eigen layer. And Eigen layer triggers a withdrawal from Ethereum. So what is happening is if you did not build a layer of lrtail, then anything that's happening in the financialized world has ripples that propagate down into Eigen layer, into ethereum. You have to withdraw that money from eigen layer. Eigen layer has to withdraw that money from Ethereum to honor that position. And suddenly the AV's security fluctuates. Ethereum security fluctuates. All of these things happen with the liquid restaking position. What happens is somebody has an LRT that's being lent and borrowed against, they get liquidated. The other guy just snatches the LRT. There is no impact on Eigen layer or ethereum. So financialization in a smart contract system is going to happen. And if it is going to happen, how do we mitigate and buffer it against ripples through the system? I think this is the first thing that is already true, is LRT is actually create buffering for Eigen layer and ethereum. Okay, now where is the actual risk? I think the actual risk is in what people call looping, right? You go and deposit an LRT, get ETH, and then go and, you know, or leverage tree staking or leverage staking. That's where actual risks are. So this is now going into, I stake, I borrow against an LRtail. And so the first thing is you cannot restake an LRT into Eigen layer. Like, that's not a thing. This is, again, like some confusion in people's model or understanding of eigen layer. I can't just go to go stake in puffer or something, get an LRT and then stake the LRT back into Eigen layer. Eigen layer doesn't allow for that. So that's not a thing. Okay. So people are like, oh, I'm going to restake the restake and all this stuff. Like, okay, that's a, the first baseline thing. But this could obviously happen in a lending market that I take an LRT and then I borrow eth against it, and then I go and stake it and so on. And this is basically a mis assignment of risk in these lending markets. And that's what we should focus on. Why is this lending market allowing you to borrow an eth for an LRT with like, you know, only x percent collateralization rather than like y percent collateralization? Why am I able to loop 50 times rather than only loop two times? So these are the kinds of questions that, you know, we should ask lending markets. This is mispricing of risk in the lending market has nothing really to do with Eigen layer. And so, but we are going to be like, putting out some of these modeling things so that people understand what is actually Ima."
    },
    {
        "speaker": "A",
        "text": "Do you want to add anything to the daisy chain of rest conversation?"
    },
    {
        "speaker": "C",
        "text": "Those, the two points were pretty much what, yeah, what I was going to say. So beautiful."
    },
    {
        "speaker": "B",
        "text": "Just one more thing on that is smart contract risks, which we didn't talk about. Right. Like I talked about earlier when talking about the withdrawal lag, that the Eigen layer core, you know, each state is one way it is protected is because of the withdrawal lag, because, you know, there is a time to pause and, you know, do Security Council interventions and all of that. But on the AV's slashing, you know, AV's could have a bug in the slashing contracts that is really only buffered by the veto committee. And initially we are going to have a single veto committee. But over time, you may have a marketplace of veto committees like each, each staker and operator decides what kind of like veto committee they want. And absence can work with them only if they agree on. It's like a, kind of like a mutually trusted party or like a arbitration agreement. Right."
    },
    {
        "speaker": "C",
        "text": "So that, that's what it actually, one thing I would say in this discussion is there is probably a misconception around how operators view their position in the ecosystem. There will be a sweet spot in terms of how many abs's they want to opt into, in contrast to how much risk they're willing to take on. Because obviously, if you go beyond this threshold, beyond this sweet spot, you're increasing your risk at the. You're at the risk of losing yields. Right? Using, like, if you go down, you can't really have that anymore. So the whole concept of, oh, yeah, each operator is going to opt into every single abs out there. Probably not the most practical scenario."
    },
    {
        "speaker": "A",
        "text": "So, yeah, on that note, that actually perfectly leads into a question that I have. So this one comes from me. I want to talk about possible design architectures for avss that have slashing as, like, more permissible slashing. Whereas, like, I think we talk about many AV's networks, and the general context that we talk about them is, like, we want zero slashing events for which there will be many, many services, where, like, that is the optimum zero slashing events. But maybe there's a landscape to talk about AV's networks in which people being slashed is actually a part of the way that the system works and it functions healthily. Like, I could, for example, I could imagine if we all remember the old Auger design, the old prediction market, where people would stake their Auger tokens on the particular outcome of an event. And if you staked in the minority, you were slashed for being wrong. And it was an oracle service. And so somebody needed to be slashed in order for the system to work at all. And as a result of this system, we had this oracle, a prediction market, and this thing would function. So I could imagine an Eigen layer AV's network like that, where the AV's role is an oracle. And I could imagine there are other AV's constructions in which a normal functioning, healthily healthy operating AV's actually has frequent AV's slashing events. And why are we okay with that? Well, because the yield compensates for that and more. Have we thought about cyber sort of these constructions? Sriram, you want to go first?"
    },
    {
        "speaker": "B",
        "text": "Yeah. This is a really, really interesting question, and I should say this is out of scope for our current eigen layer design. And the reason is, you know, systems like Auger have a tyranny of majority. You know, you slash the minority based on a majority opinion. What if the majority was actually adversarial and then, like, try to impose their, like, wrong opinion on the minority and get the minority slashed. What really protects Auger and Auger as a system itself doesn't have it. And the reason it doesn't have this problem is they had a way to fork the Auger token if something bad happened."
    },
    {
        "speaker": "A",
        "text": "Yeah."
    },
    {
        "speaker": "B",
        "text": "And, you know, this is where. This is the boundary that Vitalik has drawn for us, that, hey, don't do stuff, assuming, you know, ethereum will work for you. And I think it's a really good sign principle of, like, you know, drawing a boundary. So it's one thing to consider avSs, where you could get slashed, you know, a small amount in the normal mode. It's another thing to consider in AV's, which has a tyranny of majority. And I think we just simply don't go there. The aviass should not have a way to slash a minority of people based on the majority opinion, because if the majority colludes and tries to take down the minority, then it's kind of like a big systemic instability. Okay. And the other really important property, I think they. So whether AVSs or operators get slashed in a. In a normal mode is still okay. But I think the main thing that we want to kind of, like, have as a property of Eigen layer is that if you're an operator and if you're honest, and let's say you can even add a honest and effective, then you will not get slashed. If you're honest, you should not get slashed as the bar. But you could even, like, lower that a bit and say, oh, if you're honest and effective, which means diligent and doing your stuff, then you should never get slashed. I think that is the. Because that's what retains all the properties that we want about, let's say, an LRT. When somebody is holding an LRT, what are they actually holding? They are saying, this would be equal to one. Ethan. If I trust that the operators are honest, that's a really, really nice kind of mental model that if I trust these operators are right, then this will be equal to one eth, because all these other things won't happen. But if we start loading uncalculatable risks into this layer, so this is, again, a very sharp boundary. We only want to do validation services, and we only want to do validation services where risks are what we call endogenous. If you are an operator, it should be under your control not to get slashed. That's a very, very, very important property. Because once it's like that, then all these cascades and problems that people have about eigen layer, they don't show up. But if you don't do it like that, then you have all kinds of problems and the system kind of blows up in ways that you can't predict."
    },
    {
        "speaker": "A",
        "text": "Okay, so that sounds like a very firm line that you are drawing, that you are saying, eigen layer will not cross that line. It will not cross the line of allowing for effective, honest operators to get to be slashed."
    },
    {
        "speaker": "B",
        "text": "Absolutely. I think that is what makes it all the rest of the properties of the system to actually work."
    },
    {
        "speaker": "A",
        "text": "Okay. Okay. And I think you also kind of implied that that same line is the line that Vitalik was labeling in his blog post, don't overload ethereum consensus."
    },
    {
        "speaker": "B",
        "text": "That's correct. In fact, the example he gave was a USD to Brazil oracle. And something crazy happens in Brazil. And then you have Brazil north and Brazil south. And now, you know, a majority is voting with Brazil north and a minority is voting with Brazil south. But actually they were all honest. And then suddenly, you know, you're slashing all the guys who voted on Brazil south based on the Brazil not guys. And then, like, you know, it's tens of billions of dollars a week slashed for just being honest and doing your job, but, but just not knowing that this thing can happen. So that's the overload that overloads ethereum social consensus. Because then what happens is now, you know, do, do we save them? Do we not save them? The shelling point is not clear and just like, confuses everybody. So that's why we draw the line there is because objective, attributable slashing for malicious operators. That is what Eigen layer is intended for."
    },
    {
        "speaker": "A",
        "text": "Intended for, yes. And also Eigen layer is also intended for permissionless innovation. And at some point, won't these two things collide? Like if. Can I go build my subjective auger layer?"
    },
    {
        "speaker": "B",
        "text": "Yeah, great question. So the way we mediate this is by the veto committee. So if I'm a staker, right, look at what I'm trusting. I'm trusting that either the AV's is correct or the AV's contracts are correct, or the veto committee is good. This is what I'm trusting when I'm opting into the system. That's the flow of trust. And so it is up to the slashing veto committee to make sure that it is able to understand and veto the slashing decisions correctly, which means it also has an onboarding function, because it needs to know what is it going to slash or not slash when such a decision comes up. So there is an onboarding decision which sits with the veto committee so there is a bit of permissioning there. But over time, like I said, we're going to have not one enshrined veto committee, but inter subjective veto committees. Each of them, you know, there can be different groups that different stakers trust and, you know, they mediate different, you know, different avss. And what this does is in, in that world, each of those veto committees still needs to onboard those avss because that's how. Because they are in a, in a position of mediating this dispute. They need to know what they're mediating. That needs to be like objective and concrete. And to the users of the AV's, you need a kind of like a clear understanding when you will get slashed and when you won't get slashed. And the problem with the majority kind of. So in a permissionless world, it's possible that some veto committee onboards services which have this kind of properties, but those committees will be less trusted and less stake will be staked through them. That's what will happen. So the thing is, by allowing for most of the genuine use cases of eigen layer which don't create these risks through the normal mode, you prevent the risk because most of the yield is from genuine useful services which think through these risks very carefully. And somebody is going to build these things which don't think through this carefully. And we want that to be exposed to the staker. And the way it's exposed to the staker is none of the big slashing veto committees are going to onboard that avs. Now I have to go and trust some other random veto committee and like, hey, why are you doing that? So that is how we stratify risk and make sure that people understand what they're opting into."
    },
    {
        "speaker": "A",
        "text": "Beautiful. That, that actually has given me a ton of clarity about. About this whole system. Uh, getting back onto the, the questions here, as we wrap up, getting closer, towards the end, I'm going to put these two questions together. Arun asks, will they eventually switch to their native token staking to secure the network? Or is it always going to be staked ETh? Always. And also Green Curry asks, what's the point of the token? So now we are getting into the theoretical Eigen layer. Token."
    },
    {
        "speaker": "B",
        "text": "Theoretical Eigen layer. Token doesn't exist. So we'll review this position if and when it exists."
    },
    {
        "speaker": "A",
        "text": "All right, so we're punting on this question. That brings me to my next, but."
    },
    {
        "speaker": "B",
        "text": "Just one important thing. The reason we have each staking as the kind of central thing in Eigen layer is this is important to understand for you know, I see a lot of people, for example, asking, hey, when you have a lot of different dlayers and fees, go to all these dlayers, what is the role of ETh? And I just want to, like, take a minute to answer this here. And the role of ETH, in our view, is Eth is the money that is programmable. You have the famous phrase, programmable money. So ETH is programmable money. And what that means is, as ETH becomes programmable money, it goes into all these different roll ups and layer tools and other places where it is being used. And because these are different, necessarily distinct zones, when a lot of the risk is now priced in ETH, right? For example, I move value between one roll up, another roller that is priced in ETH. And then you ask, what is the right collateral to secure a bridge which moves eth from one chain to another chain? That collateral should be like ETH, or pegged as closely as possible. And so the fundamental role of ethnic is Eid becomes this money that goes into all these different chains and actually doing something interesting there. But then what Eigen layer augments? That is with, if I want to move this risk around, you want to buy insurance or security in the same unit, right? Like, if all my liabilities are denominated in USD, I might as well get credit in also USD. Like, that is how I match the lowest volatility peg. If I'm moving ETH around on all these roll ups, but I have insurance in some other token, then there is a relative volatility of the token to ETH that I need to price. And that just makes it more expensive to have other tokens of security for mowing around ETH. But that could be other things that are happening. For example, USD, USDC becomes the dominant unit in all these different chains is a different world. And in that world, somebody may say, I want to stake USDC to secure a USDC to USDC transfer, because that is the closest volatility peg between that. So again, we view this as emergent market dynamics. That's why even in Eigen layer, we are initially focusing a lot on e staking. But who knows? Op token can be staked for an op token sequencer, ARP token can be staked for an ARP token finality, and so on. So these will all be happening also. But I think the fundamental role of ETH as money is what makes ETH as collateral ping pong each other to create this very powerful network effect. So that's our vision."
    },
    {
        "speaker": "A",
        "text": "Would you say ETH is like the bootloader for the eigen layer system as an asset, and then other tokens, like ARB for arbitrum, op for optimism, can then kind of enter the game when that is, when the system is ready for it."
    },
    {
        "speaker": "B",
        "text": "I think that's possible because many of these different systems may want, for example, the way they might start off is, they say, dual staking with ARB and eat. But unless the belief is that any of these other tokens acquire the money nas that ETH has been able to acquire, risks will be primarily denominated in ETH, and therefore ETH as collateral still dominates in terms of utility. But there will be other tokens staked for purely alignment and other purpose, and they are the team that build it. They have to choose what token needs to be staked. So that is absolutely going to be a free market."
    },
    {
        "speaker": "A",
        "text": "Preston, so long as ETH is the money of the metaverse, this is probably where it's going to go moving forward. If the metaverse demands something else, Eigen layer will serve that demand. Cool. Last couple, last questions. Two more questions. Gabriel Haynes. We all love Gabe. He asks, of course, when theoretical token."
    },
    {
        "speaker": "B",
        "text": "That'S the answer."
    },
    {
        "speaker": "A",
        "text": "Okay, all right, David. Me asks when Mainnet."
    },
    {
        "speaker": "B",
        "text": "Oh, yeah, I. Early Q two."
    },
    {
        "speaker": "A",
        "text": "Early Q two. Early Q two. All right. Is there any other questions that. That's the end of my questions. Are there any questions that you guys wish that I had asked? What questions should I have? I have asked."
    },
    {
        "speaker": "B",
        "text": "The questions around. Risks were really good. So, you know, another time, maybe there's a, there's an opportunity to dig into, just like, you know, in a detailed discussion on some of that, because I see a lot of people don't understand the models clearly enough to know what is actually happening. But I think they were really good. Some of the discussion around. For example, can you have an Auger Oracle? I think your questions are on that. Awesome."
    },
    {
        "speaker": "A",
        "text": "All right, guys, well, if that's all the questions, which it is, I really appreciate. Nima. It's good to reconnect. And now probably, am I going to see you at East Denver?"
    },
    {
        "speaker": "C",
        "text": "Absolutely. And a lot of the team from eigenlabs, actually."
    },
    {
        "speaker": "A",
        "text": "Oh, yeah, yeah, yeah. Sriram will definitely see you at Ethan as well."
    },
    {
        "speaker": "B",
        "text": "Absolutely. Yep."
    },
    {
        "speaker": "A",
        "text": "Bankless nation. You guys, thank you so much for coming on and answering all these questions from myself and the community. I feel much smarter about Eigen lair bankless."
    },
    {
        "speaker": "B",
        "text": "Thanks for the deal."
    },
    {
        "speaker": "A",
        "text": "Crypto is risky. Staking is risky. Restaking is re risky. You can lose what you put in. That was a terrible pun, but we are headed west. This is frontier. It's not for everyone. But we are glad you are with us on the bankless journey. Thanks a lot."
    }
]